{
    "scatter": {
        "name": "Scatter", 
        "obj_type": "dictionary", 
        "parent_keys": [], 
        "docstring": "A dictionary-like object for representing a scatter trace in plotly.", 
        "examples": [
            "py.plot([Scatter(name='tacters', x=[1,4,2,3], y=[1,6,2,1])])"
        ], 
        "links": [
            "https://plot.ly/python/line-and-scatter/", 
            "https://plot.ly/python/bubble-charts/", 
            "https://plot.ly/python/filled-area-plots/", 
            "https://plot.ly/python/time-series/"
        ], 
        "keymeta": {
            "x": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": " when 'y','r' and 't' are unset", 
                "description": "Sets the x coordinates of the points of this scatter trace. If 'x' is linked to a list or 1d numpy array of strings, then the x coordinates are integers, 0, 1, 2, 3, ..., labeled on the x-axis by the list or 1d numpy array of strings linked to 'x'.", 
                "streamable": true
            }, 
            "y": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": " when 'x','r' and 't' are unset", 
                "description": "Sets the y coordinates of the points of this scatter trace. If 'y' is linked to a list or 1d numpy array of strings, then the y coordinates are integers, 0, 1, 2, 3, ..., labeled on the y-axis by the list or 1d numpy array of strings linked to 'y'.", 
                "streamable": true
            }, 
            "r": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers", 
                "required": " when making a Polar Chart", 
                "description": "For Polar charts only. Sets the radial coordinates of the points in this polar scatter trace about the origin.", 
                "streamable": true
            }, 
            "t": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": " when making a Polar Chart", 
                "description": "For Polar charts only. Sets the angular coordinates of the points in this polar scatter trace. By default, the angular coordinates are in degrees (0 to 360) where the angles are measured clockwise about the right-hand side of the origin. To change this behavior, modify 'range' in 'angularaxis' or/and 'direction' in 'layout'. If 't' is linked to a list or 1d numpy array of strings, then the angular coordinates are 0, 360\\N, 2*360/N, ... where N is the number of coordinates given labeled by the list or 1d numpy array of strings linked to 't'.", 
                "streamable": true
            }, 
            "mode": {
                "key_type": "plot_info", 
                "val_types": "'lines' | 'markers' | 'text' | 'lines+markers' | 'lines+text' | 'markers+text' | 'lines+markers+text'", 
                "required": false, 
                "description": "Plotting mode for this scatter trace. If the mode includes 'text' then the 'text' will appear at the (x,y) points, otherwise it will appear on hover."
            }, 
            "name": {
                "key_type": "data", 
                "val_types": "a string", 
                "required": false, 
                "description": "The label associated with this trace. This name will appear in the legend, on hover and in the column header in the online spreadsheet."
            }, 
            "text": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of strings", 
                "required": false, 
                "description": "The text elements associated with each (x,y) pair in this scatter trace. If the scatter 'mode' does not include 'text' then elements linked to 'text' will appear on hover only. In contrast, if 'text' is included in 'mode', the elements in 'text' will be rendered on the plot at the locations specified in part by their corresponding (x,y) coordinate pair and the 'textposition' key.", 
                "streamable": true
            }, 
            "error_y": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing the vertical error bars (i.e. along the y-axis) that can be drawn from the (x,y) coordinates of this scatter trace.", 
                "streamable": true
            }, 
            "error_x": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing the horizontal error bars (i.e. along the x-axis) that can be drawn from the (x,y) coordinates of this scatter trace.", 
                "streamable": true
            }, 
            "marker": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object containing marker style parameters for this scatter trace. Has an effect only if 'mode' contains 'markers'.", 
                "streamable": true
            }, 
            "line": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object containing line parameters for this scatter trace. Has an effect only if 'mode' contains 'lines'.", 
                "streamable": true
            }, 
            "textposition": {
                "key_type": "style", 
                "val_types": "'top left' | 'top' (or 'top center')| 'top right' | 'left' (or 'middle left') | '' (or 'middle center') | 'right' (or 'middle right') | 'bottom left' | 'bottom' (or 'bottom center') | 'bottom right'", 
                "required": false, 
                "description": "Sets the position of the text elements in the 'text' key with respect to the data points. By default, the text elements are plotted directly at the (x,y) coordinates."
            }, 
            "textfont": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing the font style of this scatter trace's text elements. Has only an effect if 'mode' is set and includes 'text'."
            }, 
            "connectgaps": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not missing data points (i.e. '' or numpy.nan) linked to 'x' and/or 'y', are added in by Plotly using linear interpolation."
            }, 
            "fill": {
                "key_type": "plot_info", 
                "val_types": "'none' | 'tozeroy' | 'tonexty' | 'tozerox' | 'tonextx", 
                "required": false, 
                "description": "Use to make area-style charts. Determines which area to fill with a solid color.By default, the area will appear in a more-transparent shape of the line color (or of the marker color if 'mode' does not contains 'lines')."
            }, 
            "fillcolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "description": "Sets the color that will appear in the specified fill area (set in 'fill'). Has no effect if 'fill' is set to 'none'.", 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ]
            }, 
            "opacity": {
                "key_type": "style", 
                "val_types": "number: x in [0, 1]", 
                "required": false, 
                "description": "Sets the opacity, or transparency, of the entire object, also known as the alpha channel of colors. If the object's color is given in terms of 'rgba' color model, 'opacity' is redundant."
            }, 
            "xaxis": {
                "key_type": "plot_info", 
                "val_types": "'x1' | 'x2' | 'x3' | etc.", 
                "required": false, 
                "description": "This key determines which x-axis the x-coordinates of this trace will reference in the figure.  Values 'x1' and 'x' reference to 'xaxis' in 'layout', 'x2' references to 'xaxis2' in 'layout', and so on. Note that 'x1' will always refer to 'xaxis' or 'xaxis1' in 'layout', they are the same."
            }, 
            "yaxis": {
                "key_type": "plot_info", 
                "val_types": "'y1' | 'y2' | 'y3' | etc.", 
                "required": false, 
                "description": "This key determines which y-axis the y-coordinates of this trace will reference in the figure.  Values 'y1' and 'y' reference to 'yaxis' in 'layout', 'y2' references to 'yaxis2' in 'layout', and so on. Note that 'y1' will always refer to 'yaxis' or 'yaxis1' in 'layout', they are the same."
            }, 
            "showlegend": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not this trace will be labeled in the legend."
            }, 
            "stream": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object that initializes this trace as a writable-stream, for use with the streaming API."
            }, 
            "visible": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggles whether or not this object will be visible on the rendered figure."
            }, 
            "xsrc": {
                "key_type": "data", 
                "val_types": "a string equal to the unique identifier of a plotly grid column", 
                "required": " when 'y','r' and 't' are unset", 
                "description": "Sets the x coordinates of the points of this scatter trace. If 'x' is linked to a list or 1d numpy array of strings, then the x coordinates are integers, 0, 1, 2, 3, ..., labeled on the x-axis by the list or 1d numpy array of strings linked to 'x'.", 
                "streamable": true
            }, 
            "ysrc": {
                "key_type": "data", 
                "val_types": "a string equal to the unique identifier of a plotly grid column", 
                "required": " when 'x','r' and 't' are unset", 
                "description": "Sets the y coordinates of the points of this scatter trace. If 'y' is linked to a list or 1d numpy array of strings, then the y coordinates are integers, 0, 1, 2, 3, ..., labeled on the y-axis by the list or 1d numpy array of strings linked to 'y'.", 
                "streamable": true
            }, 
            "type": {
                "key_type": "plot_info", 
                "val_types": "'scatter'", 
                "required": false, 
                "description": "Plotly identifier for this data's trace type. "
            }
        }
    }, 
    "bar": {
        "name": "Bar", 
        "obj_type": "dictionary", 
        "parent_keys": [], 
        "docstring": "A dictionary-like object for representing a bar trace in plotly.", 
        "examples": [
            "py.plot([Bar(x=['yesterday', 'today', 'tomorrow'], y=[5, 4, 10])])"
        ], 
        "links": [
            "https://plot.ly/python/bar-charts/"
        ], 
        "keymeta": {
            "x": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": " when 'y' is unset", 
                "description": "Sets the x coordinates of the bars. If 'x' is linked to a list or 1d numpy array of strings, then the x coordinates are integers, 0, 1, 2, 3, ..., labeled on the x-axis by the list or 1d numpy array of strings linked to 'x'. If 'y' is not set, the bars are plotted horizontally, with their length determined by the list or 1d numpy array linked to 'x'.", 
                "streamable": true
            }, 
            "y": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": " when 'x' is unset", 
                "description": "Sets the y coordinates of the bars. If 'y' is linked to a list or 1d numpy array of strings, then the y coordinates are integers, 0, 1, 2, 3, ..., labeled on the y-axis by the list or 1d numpy array of strings linked to 'y'. If 'x' is not set, the bars are plotted vertically, with their length determined by the list or 1d numpy array linked to 'y'.", 
                "streamable": true
            }, 
            "name": {
                "key_type": "data", 
                "val_types": "a string", 
                "required": false, 
                "description": "The label associated with this trace. This name will appear in the legend, on hover and in the column header in the online spreadsheet."
            }, 
            "orientation": {
                "key_type": "plot_info", 
                "val_types": "'v' | 'h'", 
                "required": false, 
                "description": "Sets the orientation of the bars. If set to 'v', the length of each bar will run vertically. If set to 'h', the length of each bar will run horizontally"
            }, 
            "text": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of strings", 
                "required": false, 
                "description": "The text elements associated with each bar in this trace. The entries in 'text' will appear on hover only, in a text box located at the top of each bar.", 
                "streamable": true
            }, 
            "error_y": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing the vertical error bars (i.e. along the y-axis) that can be drawn from bar tops.", 
                "streamable": true
            }, 
            "error_x": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing the horizontal error bars (i.e. along the x-axis) that can be drawn from bar tops.", 
                "streamable": true
            }, 
            "marker": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object containing marker style parameters for this bar trace, for example, the bars' fill color, border width and border color.", 
                "streamable": true
            }, 
            "opacity": {
                "key_type": "style", 
                "val_types": "number: x in [0, 1]", 
                "required": false, 
                "description": "Sets the opacity, or transparency, of the entire object, also known as the alpha channel of colors. If the object's color is given in terms of 'rgba' color model, 'opacity' is redundant."
            }, 
            "xaxis": {
                "key_type": "plot_info", 
                "val_types": "'x1' | 'x2' | 'x3' | etc.", 
                "required": false, 
                "description": "This key determines which x-axis the x-coordinates of this trace will reference in the figure.  Values 'x1' and 'x' reference to 'xaxis' in 'layout', 'x2' references to 'xaxis2' in 'layout', and so on. Note that 'x1' will always refer to 'xaxis' or 'xaxis1' in 'layout', they are the same."
            }, 
            "yaxis": {
                "key_type": "plot_info", 
                "val_types": "'y1' | 'y2' | 'y3' | etc.", 
                "required": false, 
                "description": "This key determines which y-axis the y-coordinates of this trace will reference in the figure.  Values 'y1' and 'y' reference to 'yaxis' in 'layout', 'y2' references to 'yaxis2' in 'layout', and so on. Note that 'y1' will always refer to 'yaxis' or 'yaxis1' in 'layout', they are the same."
            }, 
            "showlegend": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not this trace will be labeled in the legend."
            }, 
            "stream": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object that initializes this trace as a writable-stream, for use with the streaming API."
            }, 
            "visible": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggles whether or not this object will be visible on the rendered figure."
            }, 
            "xsrc": {
                "key_type": "data", 
                "val_types": "a string equal to the unique identifier of a plotly grid column", 
                "required": " when 'y' is unset", 
                "description": "Sets the x coordinates of the bars. If 'x' is linked to a list or 1d numpy array of strings, then the x coordinates are integers, 0, 1, 2, 3, ..., labeled on the x-axis by the list or 1d numpy array of strings linked to 'x'. If 'y' is not set, the bars are plotted horizontally, with their length determined by the list or 1d numpy array linked to 'x'.", 
                "streamable": true
            }, 
            "ysrc": {
                "key_type": "data", 
                "val_types": "a string equal to the unique identifier of a plotly grid column", 
                "required": " when 'x' is unset", 
                "description": "Sets the y coordinates of the bars. If 'y' is linked to a list or 1d numpy array of strings, then the y coordinates are integers, 0, 1, 2, 3, ..., labeled on the y-axis by the list or 1d numpy array of strings linked to 'y'. If 'x' is not set, the bars are plotted vertically, with their length determined by the list or 1d numpy array linked to 'y'.", 
                "streamable": true
            }, 
            "r": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers", 
                "required": " when making a Polar Chart", 
                "description": "For Polar charts only. Sets the radial coordinates of the bars in this polar bar trace about the original; that is, the radial extent of each bar.", 
                "streamable": true
            }, 
            "t": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": " when making a Polar Chart", 
                "description": "For Polar charts only. Sets the angular coordinates of the bars in this polar bar trace. By default, the angular coordinates are in degrees (0 to 360) where the angles are measured clockwise about the right-hand side of the origin. To change this behavior, modify 'range' in 'angularaxis' or/and 'direction' in 'layout'. If 't' is linked to a list or 1d numpy array of strings, then the angular coordinates are 0, 360\\N, 2*360/N, ... where N is the number of coordinates given labeled by the list or 1d numpy array of strings linked to 't'.", 
                "streamable": true
            }, 
            "type": {
                "key_type": "plot_info", 
                "val_types": "'bar'", 
                "required": false, 
                "description": "Plotly identifier for this data's trace type. "
            }
        }
    }, 
    "histogram": {
        "name": "Histogram", 
        "obj_type": "dictionary", 
        "parent_keys": [], 
        "docstring": "A dictionary-like object for representing a histogram trace in plotly.", 
        "examples": [
            "py.plot([Histogram(x=[1,1,2,3,2,3,3])]) # bins along x-axis", 
            "py.plot([Histogram(y=[1,1,2,3,2,3,3])]) # bins along y-axis"
        ], 
        "links": [
            "https://plot.ly/python/histograms/"
        ], 
        "keymeta": {
            "x": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": " when 'y' is unset", 
                "description": "Sets the data sample to be binned (done by Plotly) on the x-axis and plotted as vertical bars.", 
                "streamable": true
            }, 
            "y": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": " when 'x' is unset", 
                "description": "Sets the data sample to be binned (done by Plotly) on the y-axis and plotted as horizontal bars.", 
                "streamable": true
            }, 
            "histnorm": {
                "key_type": "style", 
                "val_types": "'' | 'percent' | 'probability' | 'density' | 'probability density'", 
                "required": false, 
                "description": "Sets the type of normalization for this histogram trace. By default ('histnorm' set to '') the height of each bar displays the frequency of occurrence, i.e., the number of times this value was found in the corresponding bin. If set to 'percent', the height of each bar displays the percentage of total occurrences found within the corresponding bin. If set to 'probability', the height of each bar displays the probability that an event will fall into the corresponding bin. If set to 'density', the height of each bar is equal to the number of occurrences in a bin divided by the size of the bin interval such that summing the area of all bins will yield the total number of occurrences. If set to 'probability density', the height of each bar is equal to the number of probability that an event will fall into the corresponding bin divided by the size of the bin interval such that summing the area of all bins will yield 1."
            }, 
            "histfunc": {
                "key_type": "style", 
                "val_types": "'count' | 'sum' | 'avg' | 'min' | 'max'", 
                "required": false, 
                "description": "Sets the binning function used for this histogram trace. The default value is 'count' where the histogram values are computed by counting the number of values lying inside each bin. With 'histfunc' set to 'sum', 'avg', 'min' or 'max', the histogram values are computed using the sum, the average, the minimum or the 'maximum' of the values lying inside each bin respectively."
            }, 
            "name": {
                "key_type": "data", 
                "val_types": "a string", 
                "required": false, 
                "description": "The label associated with this trace. This name will appear in the legend, on hover and in the column header in the online spreadsheet."
            }, 
            "orientation": {
                "key_type": "plot_info", 
                "val_types": "'v' | 'h'", 
                "required": false, 
                "description": "Sets the orientation of the bars. If set to 'v', the length of each bar will run vertically. If set to 'h', the length of each bar will run horizontally"
            }, 
            "autobinx": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the x-axis bin parameters are picked automatically by Plotly. Once 'autobinx' is set to False, the x-axis bins parameters can be declared in 'xbins' object."
            }, 
            "nbinsx": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Specifies the number of x-axis bins. No need to set 'autobinx' to False for 'nbinsx' to apply."
            }, 
            "xbins": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object defining the parameters of x-axis bins of this trace, for example, the bin width and the bins' starting and  ending value. Has an effect only if 'autobinx' is set to False."
            }, 
            "autobiny": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the y-axis bin parameters are picked automatically by Plotly. Once 'autobiny' is set to False, the y-axis bins parameters can be declared in 'ybins' object."
            }, 
            "nbinsy": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Specifies the number of y-axis bins. No need to set 'autobiny' to False for 'nbinsy' to apply."
            }, 
            "ybins": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object defining the parameters of y-axis bins of this trace, for example, the bin width and the bins' starting and  ending value. Has an effect only if 'autobiny' is set to False."
            }, 
            "text": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of strings", 
                "required": false, 
                "description": "The text elements associated with each bar in this trace. The entries in 'text' will appear on hover only, in a text box located at the top of each bar.", 
                "streamable": true
            }, 
            "error_y": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing the vertical error bars (i.e. along the y-axis) that can be drawn from bar tops.", 
                "streamable": true
            }, 
            "error_x": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing the horizontal error bars (i.e. along the x-axis) that can be drawn from bar tops.", 
                "streamable": true
            }, 
            "marker": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object containing marker style parameters for this bar trace, for example, the bars' fill color, border width and border color.", 
                "streamable": true
            }, 
            "opacity": {
                "key_type": "style", 
                "val_types": "number: x in [0, 1]", 
                "required": false, 
                "description": "Sets the opacity, or transparency, of the entire object, also known as the alpha channel of colors. If the object's color is given in terms of 'rgba' color model, 'opacity' is redundant."
            }, 
            "xaxis": {
                "key_type": "plot_info", 
                "val_types": "'x1' | 'x2' | 'x3' | etc.", 
                "required": false, 
                "description": "This key determines which x-axis the x-coordinates of this trace will reference in the figure.  Values 'x1' and 'x' reference to 'xaxis' in 'layout', 'x2' references to 'xaxis2' in 'layout', and so on. Note that 'x1' will always refer to 'xaxis' or 'xaxis1' in 'layout', they are the same."
            }, 
            "yaxis": {
                "key_type": "plot_info", 
                "val_types": "'y1' | 'y2' | 'y3' | etc.", 
                "required": false, 
                "description": "This key determines which y-axis the y-coordinates of this trace will reference in the figure.  Values 'y1' and 'y' reference to 'yaxis' in 'layout', 'y2' references to 'yaxis2' in 'layout', and so on. Note that 'y1' will always refer to 'yaxis' or 'yaxis1' in 'layout', they are the same."
            }, 
            "showlegend": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not this trace will be labeled in the legend."
            }, 
            "stream": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object that initializes this trace as a writable-stream, for use with the streaming API."
            }, 
            "visible": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggles whether or not this object will be visible on the rendered figure."
            }, 
            "xsrc": {
                "key_type": "data", 
                "val_types": "a string equal to the unique identifier of a plotly grid column", 
                "required": " when 'y' is unset", 
                "description": "Sets the data sample to be binned (done by Plotly) on the x-axis and plotted as vertical bars.", 
                "streamable": true
            }, 
            "ysrc": {
                "key_type": "data", 
                "val_types": "a string equal to the unique identifier of a plotly grid column", 
                "required": " when 'x' is unset", 
                "description": "Sets the data sample to be binned (done by Plotly) on the y-axis and plotted as horizontal bars.", 
                "streamable": true
            }, 
            "type": {
                "key_type": "plot_info", 
                "val_types": "'histogram'", 
                "required": false, 
                "description": "Plotly identifier for this data's trace type. "
            }
        }
    }, 
    "box": {
        "name": "Box", 
        "obj_type": "dictionary", 
        "parent_keys": [], 
        "docstring": "A dictionary-like object for representing a box trace in plotly.", 
        "examples": [
            "py.plot([Box(name='boxy', y=[1,3,9,2,4,2,3,5,2])])"
        ], 
        "links": [
            "https://plot.ly/python/box-plots/"
        ], 
        "keymeta": {
            "y": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": true, 
                "description": "This array is used to define an individual box plot, or, a concatenation of multiple box plots. Statistics from these numbers define the bounds of the box, the length of the whiskers, etc. For details on defining multiple boxes with locations see 'x'. Each box spans from the first quartile to the third. The second quartile is marked by a line inside the box. By default, the whiskers are correspond to box' edges +/- 1.5 times the interquartile range. See also 'boxpoints' for more info", 
                "streamable": true
            }, 
            "x0": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "The location of this box. When 'y' defines a single box, 'x0' can be used to set where this box is centered on the x-axis. If many boxes are set to appear at the same 'x0' location, they will form a box group."
            }, 
            "x": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": false, 
                "description": "Usually, you do not need to set this value as plotly will handle box locations for you. However this allows you to have fine control over the location data for the box. Unlike making a bar, a box plot is made of many y values. Therefore, to give location data to the values you place in 'y', the length of 'x' must equal the length of 'y'. when making multiple box plots, you can concatenate the data sets for each box into a single 'y' array. then, the entries in 'x' define which box plot each entry in 'y' belongs to. When making a single box plot, you must set each entry in 'x' to the same value, see 'x0' for a more practical way to handle this case. If you don't include 'x', the box will simply be assigned a location.", 
                "streamable": true
            }, 
            "name": {
                "key_type": "data", 
                "val_types": "a string", 
                "required": false, 
                "description": "The label associated with this trace. This name will appear in the legend, on hover and in the column header in the online spreadsheet."
            }, 
            "boxmean": {
                "key_type": "style", 
                "val_types": "False | True | 'sd'", 
                "required": false, 
                "description": "Choose between add-on features for this box trace. If True then the mean of the data linked to 'y' is shown as a dashed line in the box. If 'sd', then the standard deviation is also shown. If False (the default), then no line are shown."
            }, 
            "boxpoints": {
                "key_type": "style", 
                "val_types": "'outliers' | 'all' | 'suspectedoutliers' | False", 
                "required": false, 
                "description": "Choose between boxpoints options for this box trace. If 'outliers' (the default), then only the points lying outside the box' whiskers (more info in 'y') are shown. If 'all', then all data points linked 'y' are shown. If 'suspectedoutliers', then outliers points are shown and points either less than 4*Q1-3*Q3 or greater than 4*Q3-3*Q1 are highlighted (with 'outliercolor' in Marker). If False, then only the boxes are shown and the whiskers correspond to the minimum and maximum value linked to 'y'."
            }, 
            "jitter": {
                "key_type": "style", 
                "val_types": "number: x in [0, 1]", 
                "required": false, 
                "description": "Sets the width of the jitter in the boxpoints scatter in this trace. Has an no effect if 'boxpoints' is set to False. If 0, then the boxpoints are aligned vertically. If 1 then the boxpoints are placed in a random horizontal jitter of width equal to the width of the boxes."
            }, 
            "pointpos": {
                "key_type": "style", 
                "val_types": "number: x in [-2, 2]", 
                "required": false, 
                "description": "Sets the horizontal position of the boxpoints in relation to the boxes in this trace. Has an no effect if 'boxpoints' is set to False. If 0, then the boxpoints are placed over the center of each box. If 1 (-1), then the boxpoints are placed on the right (left) each box border. If 2 (-2), then the boxpoints are  placed 1 one box width to right (left) of each box. "
            }, 
            "whiskerwidth": {
                "key_type": "style", 
                "val_types": "number: x in [0, 1]", 
                "required": false, 
                "description": "Sets the width of the whisker of the box relative to the box' width (in normalized coordinates, e.g. if 'whiskerwidth' set 1, then the whiskers are as wide as the box."
            }, 
            "fillcolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "description": "Sets the color of the box interior.", 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ]
            }, 
            "marker": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object containing marker style parameters for this the boxpoints of box trace. Has an effect only 'boxpoints' is set to 'outliers', 'suspectedoutliers' or 'all'.", 
                "streamable": true
            }, 
            "line": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object containing line parameters for the border of this box trace (including the whiskers).", 
                "streamable": true
            }, 
            "opacity": {
                "key_type": "style", 
                "val_types": "number: x in [0, 1]", 
                "required": false, 
                "description": "Sets the opacity, or transparency, of the entire object, also known as the alpha channel of colors. If the object's color is given in terms of 'rgba' color model, 'opacity' is redundant."
            }, 
            "xaxis": {
                "key_type": "plot_info", 
                "val_types": "'x1' | 'x2' | 'x3' | etc.", 
                "required": false, 
                "description": "This key determines which x-axis the x-coordinates of this trace will reference in the figure.  Values 'x1' and 'x' reference to 'xaxis' in 'layout', 'x2' references to 'xaxis2' in 'layout', and so on. Note that 'x1' will always refer to 'xaxis' or 'xaxis1' in 'layout', they are the same."
            }, 
            "yaxis": {
                "key_type": "plot_info", 
                "val_types": "'y1' | 'y2' | 'y3' | etc.", 
                "required": false, 
                "description": "This key determines which y-axis the y-coordinates of this trace will reference in the figure.  Values 'y1' and 'y' reference to 'yaxis' in 'layout', 'y2' references to 'yaxis2' in 'layout', and so on. Note that 'y1' will always refer to 'yaxis' or 'yaxis1' in 'layout', they are the same."
            }, 
            "showlegend": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not this trace will be labeled in the legend."
            }, 
            "stream": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object that initializes this trace as a writable-stream, for use with the streaming API."
            }, 
            "visible": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggles whether or not this object will be visible on the rendered figure."
            }, 
            "xsrc": {
                "key_type": "data", 
                "val_types": "a string equal to the unique identifier of a plotly grid column", 
                "required": false, 
                "description": "Usually, you do not need to set this value as plotly will handle box locations for you. However this allows you to have fine control over the location data for the box. Unlike making a bar, a box plot is made of many y values. Therefore, to give location data to the values you place in 'y', the length of 'x' must equal the length of 'y'. when making multiple box plots, you can concatenate the data sets for each box into a single 'y' array. then, the entries in 'x' define which box plot each entry in 'y' belongs to. When making a single box plot, you must set each entry in 'x' to the same value, see 'x0' for a more practical way to handle this case. If you don't include 'x', the box will simply be assigned a location.", 
                "streamable": true
            }, 
            "ysrc": {
                "key_type": "data", 
                "val_types": "a string equal to the unique identifier of a plotly grid column", 
                "required": true, 
                "description": "This array is used to define an individual box plot, or, a concatenation of multiple box plots. Statistics from these numbers define the bounds of the box, the length of the whiskers, etc. For details on defining multiple boxes with locations see 'x'. Each box spans from the first quartile to the third. The second quartile is marked by a line inside the box. By default, the whiskers are correspond to box' edges +/- 1.5 times the interquartile range. See also 'boxpoints' for more info", 
                "streamable": true
            }, 
            "type": {
                "key_type": "plot_info", 
                "val_types": "'box'", 
                "required": false, 
                "description": "Plotly identifier for this data's trace type. "
            }
        }
    }, 
    "heatmap": {
        "name": "Heatmap", 
        "obj_type": "dictionary", 
        "parent_keys": [], 
        "docstring": "A dictionary-like object for representing a heatmap trace in plotly.", 
        "examples": [
            "z = [[0, 1, 0, 1, 0], [1, 0, 1, 0, 1], [0, 1, 0, 1, 0]]", 
            "y = ['a', 'b', 'c']", 
            "x = [1, 2, 3, 4, 5]py.plot([Contour(z=z, x=x, y=y)])"
        ], 
        "links": [
            "https://plot.ly/python/heatmaps/"
        ], 
        "keymeta": {
            "z": {
                "key_type": "data", 
                "val_types": "list of lists or 2d numpy array of numbers", 
                "required": true, 
                "description": "Sets the data that describes the heatmap mapping. Say the dimensions of the list of lists or 2d numpy array linked to 'z' has n rows and m columns then the resulting heatmap will show n partitions along the y-axis and m partitions along the x-axis. Therefore, the i-th row/ j-th column cell in the list of lists or 2d numpy array linked to 'z' is mapped to the i-th partition of the y-axis (starting from the bottom of the plot) and the j-th partition of the x-axis (starting from the left of the plot). ", 
                "streamable": true
            }, 
            "x": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": false, 
                "description": "Sets the horizontal coordinates referring to the columns of the list of lists or 2d numpy array linked to 'z'. If the 'z' is a list or 1d numpy array of strings, then the x-labels are spaced evenly. If the dimensions of the list of lists or 2d numpy array linked to 'z' are (n x m), the length of the 'x' array should equal m.", 
                "streamable": true
            }, 
            "y": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": false, 
                "description": "Sets the vertical coordinates referring to the rows of the list of lists or 2d numpy array linked to 'z'. If strings, the y-labels are spaced evenly. If the dimensions of the list of lists or 2d numpy array linked to 'z' are (n x m), the length of the 'y' array should equal n.", 
                "streamable": true
            }, 
            "name": {
                "key_type": "data", 
                "val_types": "a string", 
                "required": false, 
                "description": "The label associated with this trace. This name will appear in the legend, on hover and in the column header in the online spreadsheet."
            }, 
            "zauto": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the default values of 'zmax' and 'zmax' can be overwritten."
            }, 
            "zmin": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the minimum 'z' data value to be resolved by the color scale. Its default value is the minimum of the 'z' data values. This value will be used as the minimum in the color scale normalization. For more info see 'colorscale'."
            }, 
            "zmax": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the maximum 'z' data value to be resolved by the color scale. Its default value is the maximum of the 'z' data values. This value will be used as the maximum in the color scale normalization. For more info see 'colorscale'."
            }, 
            "colorscale": {
                "key_type": "plot_info", 
                "val_types": "list or 1d numpy array of value-color pairs | 'Greys' | 'Greens' | 'Bluered' | 'Hot' | 'Picnic' | 'Portland' | 'Jet' | 'RdBu' | 'Blackbody' | 'Earth' | 'Electric' | 'YIOrRd' | 'YIGnBu'", 
                "required": false, 
                "description": "Sets and/or defines the color scale for this trace. The string values are pre-defined color scales. For custom color scales, define a list or 1d numpy array of value-color pairs where, the first element of the pair corresponds to a normalized value of z from 0-1, i.e. (z-zmin)/ (zmax-zmin), and the second element of pair corresponds to a color. Use with 'zauto', 'zmin' and 'zmax to fine-tune the map from 'z' to rendered colors.", 
                "examples": [
                    "'Greys'", 
                    "[[0, 'rgb(0,0,0)'], [0.5, 'rgb(65, 182, 196)'], [1, 'rgb(255,255,255)']]"
                ]
            }, 
            "reversescale": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the color scale will be reversed."
            }, 
            "showscale": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the color scale associated with this mapping will be shown alongside the figure."
            }, 
            "colorbar": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object defining the parameters of the color bar associated with this trace (including its title, length and width)."
            }, 
            "zsmooth": {
                "key_type": "style", 
                "val_types": "False | 'best' | 'fast'", 
                "required": false, 
                "description": "Choose between algorithms ('best' or 'fast') to smooth data linked to 'z'. The default value is False corresponding to no smoothing."
            }, 
            "opacity": {
                "key_type": "style", 
                "val_types": "number: x in [0, 1]", 
                "required": false, 
                "description": "Sets the opacity, or transparency, of the entire object, also known as the alpha channel of colors. If the object's color is given in terms of 'rgba' color model, 'opacity' is redundant."
            }, 
            "xaxis": {
                "key_type": "plot_info", 
                "val_types": "'x1' | 'x2' | 'x3' | etc.", 
                "required": false, 
                "description": "This key determines which x-axis the x-coordinates of this trace will reference in the figure.  Values 'x1' and 'x' reference to 'xaxis' in 'layout', 'x2' references to 'xaxis2' in 'layout', and so on. Note that 'x1' will always refer to 'xaxis' or 'xaxis1' in 'layout', they are the same."
            }, 
            "yaxis": {
                "key_type": "plot_info", 
                "val_types": "'y1' | 'y2' | 'y3' | etc.", 
                "required": false, 
                "description": "This key determines which y-axis the y-coordinates of this trace will reference in the figure.  Values 'y1' and 'y' reference to 'yaxis' in 'layout', 'y2' references to 'yaxis2' in 'layout', and so on. Note that 'y1' will always refer to 'yaxis' or 'yaxis1' in 'layout', they are the same."
            }, 
            "showlegend": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not this trace will be labeled in the legend."
            }, 
            "stream": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object that initializes this trace as a writable-stream, for use with the streaming API."
            }, 
            "visible": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggles whether or not this object will be visible on the rendered figure."
            }, 
            "x0": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "The location of the first coordinate of the x-axis. Use with 'dx' an alternative to an 'x' list or 1d numpy array. Has no effect if 'x' is set."
            }, 
            "dx": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "Spacing between x-axis coordinates. Use with 'x0' an alternative to an 'x' list or 1d numpy array. Has no effect if 'x' is set."
            }, 
            "y0": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "The location of the first coordinate of the y-axis. Use with 'dy' an alternative to an 'y' list or 1d numpy array. Has no effect if 'y' is set."
            }, 
            "dy": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "Spacing between y-axis coordinates. Use with 'y0' an alternative to an 'y' list or 1d numpy array. Has no effect if 'y' is set."
            }, 
            "xtype": {
                "key_type": "plot_info", 
                "val_types": "'array' | 'scaled'", 
                "required": false, 
                "description": "If set to 'scaled' and 'x' is linked to a list or 1d numpy array, then the horizontal labels are scaled to a list or 1d numpy array of integers of unit step starting from 0."
            }, 
            "ytype": {
                "key_type": "plot_info", 
                "val_types": "'array' | 'scaled'", 
                "required": false, 
                "description": "If set to 'scaled' and 'y' is linked to a list or 1d numpy array, then the vertical labels are scaled to a list or 1d numpy array of integers of unit step starting from 0."
            }, 
            "type": {
                "key_type": "plot_info", 
                "val_types": "'heatmap'", 
                "required": false, 
                "description": "Plotly identifier for this data's trace type. "
            }
        }
    }, 
    "contour": {
        "name": "Contour", 
        "obj_type": "dictionary", 
        "parent_keys": [], 
        "docstring": "A dictionary-like object for representing a contour trace in plotly.", 
        "examples": [
            "z = [[0, 1, 0, 1, 0], [1, 0, 1, 0, 1], [0, 1, 0, 1, 0]]", 
            "y = ['a', 'b', 'c']", 
            "x = [1, 2, 3, 4, 5]py.plot([Contour(z=z, x=x, y=y)])"
        ], 
        "links": [
            "https://plot.ly/python/contour-plots/"
        ], 
        "keymeta": {
            "z": {
                "key_type": "data", 
                "val_types": "list of lists or 2d numpy array of numbers", 
                "required": true, 
                "description": "Sets the data that describes the contour map mapping. Say the dimensions of the list of lists or 2d numpy array linked to 'z' has n rows and m columns then the resulting contour map will show n partitions along the y-axis and m partitions along the x-axis. Therefore, the i-th row/ j-th column cell in the list of lists or 2d numpy array linked to 'z' is mapped to the i-th partition of the y-axis (starting from the bottom of the plot) and the j-th partition of the x-axis (starting from the left of the plot). ", 
                "streamable": true
            }, 
            "x": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": false, 
                "description": "Sets the horizontal coordinates referring to the columns of the list of lists or 2d numpy array linked to 'z'. If the 'z' is a list or 1d numpy array of strings, then the x-labels are spaced evenly. If the dimensions of the list of lists or 2d numpy array linked to 'z' are (n x m), the length of the 'x' array should equal m.", 
                "streamable": true
            }, 
            "y": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": false, 
                "description": "Sets the vertical coordinates referring to the rows of the list of lists or 2d numpy array linked to 'z'. If strings, the y-labels are spaced evenly. If the dimensions of the list of lists or 2d numpy array linked to 'z' are (n x m), the length of the 'y' array should equal n.", 
                "streamable": true
            }, 
            "name": {
                "key_type": "data", 
                "val_types": "a string", 
                "required": false, 
                "description": "The label associated with this trace. This name will appear in the legend, on hover and in the column header in the online spreadsheet."
            }, 
            "zauto": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the default values of 'zmax' and 'zmax' can be overwritten."
            }, 
            "zmin": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the minimum 'z' data value to be resolved by the color scale. Its default value is the minimum of the 'z' data values. This value will be used as the minimum in the color scale normalization. For more info see 'colorscale'."
            }, 
            "zmax": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the maximum 'z' data value to be resolved by the color scale. Its default value is the maximum of the 'z' data values. This value will be used as the maximum in the color scale normalization. For more info see 'colorscale'."
            }, 
            "autocontour": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the contour parameters are picked automatically by Plotly. If False, declare the contours parameters in 'contours'."
            }, 
            "ncontours": {
                "key_type": "style", 
                "val_types": "number: x > 1", 
                "required": false, 
                "description": "Specifies the number of contours lines in the contour plot. No need to set 'autocontour' to False for 'ncontours' to apply."
            }, 
            "contours": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object defining the parameters of the contours of this trace."
            }, 
            "line": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object containing line parameters for contour lines of this contour trace (including line width, dash, color and smoothing level). Has no an effect if 'showlines' is set to False in 'contours'.", 
                "streamable": true
            }, 
            "colorscale": {
                "key_type": "plot_info", 
                "val_types": "list or 1d numpy array of value-color pairs | 'Greys' | 'Greens' | 'Bluered' | 'Hot' | 'Picnic' | 'Portland' | 'Jet' | 'RdBu' | 'Blackbody' | 'Earth' | 'Electric' | 'YIOrRd' | 'YIGnBu'", 
                "required": false, 
                "description": "Sets and/or defines the color scale for this trace. The string values are pre-defined color scales. For custom color scales, define a list or 1d numpy array of value-color pairs where, the first element of the pair corresponds to a normalized value of z from 0-1, i.e. (z-zmin)/ (zmax-zmin), and the second element of pair corresponds to a color. Use with 'zauto', 'zmin' and 'zmax to fine-tune the map from 'z' to rendered colors.", 
                "examples": [
                    "'Greys'", 
                    "[[0, 'rgb(0,0,0)'], [0.5, 'rgb(65, 182, 196)'], [1, 'rgb(255,255,255)']]"
                ]
            }, 
            "reversescale": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the color scale will be reversed."
            }, 
            "showscale": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the color scale associated with this mapping will be shown alongside the figure."
            }, 
            "colorbar": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object defining the parameters of the color bar associated with this trace (including its title, length and width)."
            }, 
            "opacity": {
                "key_type": "style", 
                "val_types": "number: x in [0, 1]", 
                "required": false, 
                "description": "Sets the opacity, or transparency, of the entire object, also known as the alpha channel of colors. If the object's color is given in terms of 'rgba' color model, 'opacity' is redundant."
            }, 
            "xaxis": {
                "key_type": "plot_info", 
                "val_types": "'x1' | 'x2' | 'x3' | etc.", 
                "required": false, 
                "description": "This key determines which x-axis the x-coordinates of this trace will reference in the figure.  Values 'x1' and 'x' reference to 'xaxis' in 'layout', 'x2' references to 'xaxis2' in 'layout', and so on. Note that 'x1' will always refer to 'xaxis' or 'xaxis1' in 'layout', they are the same."
            }, 
            "yaxis": {
                "key_type": "plot_info", 
                "val_types": "'y1' | 'y2' | 'y3' | etc.", 
                "required": false, 
                "description": "This key determines which y-axis the y-coordinates of this trace will reference in the figure.  Values 'y1' and 'y' reference to 'yaxis' in 'layout', 'y2' references to 'yaxis2' in 'layout', and so on. Note that 'y1' will always refer to 'yaxis' or 'yaxis1' in 'layout', they are the same."
            }, 
            "showlegend": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not this trace will be labeled in the legend."
            }, 
            "stream": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object that initializes this trace as a writable-stream, for use with the streaming API."
            }, 
            "visible": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggles whether or not this object will be visible on the rendered figure."
            }, 
            "x0": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "The location of the first coordinate of the x-axis. Use with 'dx' an alternative to an 'x' list or 1d numpy array. Has no effect if 'x' is set."
            }, 
            "dx": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "Spacing between x-axis coordinates. Use with 'x0' an alternative to an 'x' list or 1d numpy array. Has no effect if 'x' is set."
            }, 
            "y0": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "The location of the first coordinate of the y-axis. Use with 'dy' an alternative to an 'y' list or 1d numpy array. Has no effect if 'y' is set."
            }, 
            "dy": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "Spacing between y-axis coordinates. Use with 'y0' an alternative to an 'y' list or 1d numpy array. Has no effect if 'y' is set."
            }, 
            "xtype": {
                "key_type": "plot_info", 
                "val_types": "'array' | 'scaled'", 
                "required": false, 
                "description": "If set to 'scaled' and 'x' is linked to a list or 1d numpy array, then the horizontal labels are scaled to a list or 1d numpy array of integers of unit step starting from 0."
            }, 
            "ytype": {
                "key_type": "plot_info", 
                "val_types": "'array' | 'scaled'", 
                "required": false, 
                "description": "If set to 'scaled' and 'y' is linked to a list or 1d numpy array, then the vertical labels are scaled to a list or 1d numpy array of integers of unit step starting from 0."
            }, 
            "type": {
                "key_type": "plot_info", 
                "val_types": "'contour'", 
                "required": false, 
                "description": "Plotly identifier for this data's trace type. "
            }
        }
    }, 
    "histogram2d": {
        "name": "Histogram2d", 
        "obj_type": "dictionary", 
        "parent_keys": [], 
        "docstring": "A dictionary-like object for representing a 2D histogram trace in plotly.", 
        "examples": [
            "import numpy as np", 
            "x = np.random.randn(500)", 
            "y = np.random.randn(500)+1", 
            "py.iplot([Histogram2d(x=x, y=y)])"
        ], 
        "links": [
            "https://plot.ly/python/2D-Histograms/"
        ], 
        "keymeta": {
            "x": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": true, 
                "description": "Sets the data sample to be binned on the x-axis and whose distribution (computed by Plotly) will correspond to the x-coordinates of this 2D histogram trace.", 
                "streamable": true
            }, 
            "y": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": true, 
                "description": "Sets the data sample to be binned on the y-axis and whose distribution (computed by Plotly) will correspond to the y-coordinates of this 2D histogram trace.", 
                "streamable": true
            }, 
            "histnorm": {
                "key_type": "style", 
                "val_types": "'' | 'percent' | 'probability' | 'density' | 'probability density'", 
                "required": false, 
                "description": "Sets the type of normalization for this histogram trace. By default ('histnorm' set to '') the height of each bar displays the frequency of occurrence, i.e., the number of times this value was found in the corresponding bin. If set to 'percent', the height of each bar displays the percentage of total occurrences found within the corresponding bin. If set to 'probability', the height of each bar displays the probability that an event will fall into the corresponding bin. If set to 'density', the height of each bar is equal to the number of occurrences in a bin divided by the size of the bin interval such that summing the area of all bins will yield the total number of occurrences. If set to 'probability density', the height of each bar is equal to the number of probability that an event will fall into the corresponding bin divided by the size of the bin interval such that summing the area of all bins will yield 1."
            }, 
            "histfunc": {
                "key_type": "style", 
                "val_types": "'count' | 'sum' | 'avg' | 'min' | 'max'", 
                "required": false, 
                "description": "Sets the binning function used for this histogram trace. The default value is 'count' where the histogram values are computed by counting the number of values lying inside each bin. With 'histfunc' set to 'sum', 'avg', 'min' or 'max', the histogram values are computed using the sum, the average, the minimum or the 'maximum' of the values lying inside each bin respectively."
            }, 
            "name": {
                "key_type": "data", 
                "val_types": "a string", 
                "required": false, 
                "description": "The label associated with this trace. This name will appear in the legend, on hover and in the column header in the online spreadsheet."
            }, 
            "autobinx": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the x-axis bin parameters are picked automatically by Plotly. Once 'autobinx' is set to False, the x-axis bins parameters can be declared in 'xbins' object."
            }, 
            "nbinsx": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Specifies the number of x-axis bins. No need to set 'autobinx' to False for 'nbinsx' to apply."
            }, 
            "xbins": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object defining the parameters of x-axis bins of this trace, for example, the bin width and the bins' starting and  ending value. Has an effect only if 'autobinx' is set to False."
            }, 
            "autobiny": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the y-axis bin parameters are picked automatically by Plotly. Once 'autobiny' is set to False, the y-axis bins parameters can be declared in 'ybins' object."
            }, 
            "nbinsy": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Specifies the number of y-axis bins. No need to set 'autobiny' to False for 'nbinsy' to apply."
            }, 
            "ybins": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object defining the parameters of y-axis bins of this trace, for example, the bin width and the bins' starting and  ending value. Has an effect only if 'autobiny' is set to False."
            }, 
            "colorscale": {
                "key_type": "plot_info", 
                "val_types": "list or 1d numpy array of value-color pairs | 'Greys' | 'Greens' | 'Bluered' | 'Hot' | 'Picnic' | 'Portland' | 'Jet' | 'RdBu' | 'Blackbody' | 'Earth' | 'Electric' | 'YIOrRd' | 'YIGnBu'", 
                "required": false, 
                "description": "Sets and/or defines the color scale for this trace. The string values are pre-defined color scales. For custom color scales, define a list or 1d numpy array of value-color pairs where, the first element of the pair corresponds to a normalized value of z from 0-1, i.e. (z-zmin)/ (zmax-zmin), and the second element of pair corresponds to a color. Use with 'zauto', 'zmin' and 'zmax to fine-tune the map from 'z' to rendered colors.", 
                "examples": [
                    "'Greys'", 
                    "[[0, 'rgb(0,0,0)'], [0.5, 'rgb(65, 182, 196)'], [1, 'rgb(255,255,255)']]"
                ]
            }, 
            "reversescale": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the color scale will be reversed."
            }, 
            "showscale": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the color scale associated with this mapping will be shown alongside the figure."
            }, 
            "colorbar": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object defining the parameters of the color bar associated with this trace (including its title, length and width)."
            }, 
            "zauto": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the default values of 'zmax' and 'zmax' can be overwritten."
            }, 
            "zmin": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the minimum 'z' data value to be resolved by the color scale. Its default value is the minimum of the 'z' data values. This value will be used as the minimum in the color scale normalization. For more info see 'colorscale'."
            }, 
            "zmax": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the maximum 'z' data value to be resolved by the color scale. Its default value is the maximum of the 'z' data values. This value will be used as the maximum in the color scale normalization. For more info see 'colorscale'."
            }, 
            "zsmooth": {
                "key_type": "style", 
                "val_types": "False | 'best' | 'fast'", 
                "required": false, 
                "description": "Choose between algorithms ('best' or 'fast') to smooth data linked to 'z'. The default value is False corresponding to no smoothing."
            }, 
            "opacity": {
                "key_type": "style", 
                "val_types": "number: x in [0, 1]", 
                "required": false, 
                "description": "Sets the opacity, or transparency, of the entire object, also known as the alpha channel of colors. If the object's color is given in terms of 'rgba' color model, 'opacity' is redundant."
            }, 
            "xaxis": {
                "key_type": "plot_info", 
                "val_types": "'x1' | 'x2' | 'x3' | etc.", 
                "required": false, 
                "description": "This key determines which x-axis the x-coordinates of this trace will reference in the figure.  Values 'x1' and 'x' reference to 'xaxis' in 'layout', 'x2' references to 'xaxis2' in 'layout', and so on. Note that 'x1' will always refer to 'xaxis' or 'xaxis1' in 'layout', they are the same."
            }, 
            "yaxis": {
                "key_type": "plot_info", 
                "val_types": "'y1' | 'y2' | 'y3' | etc.", 
                "required": false, 
                "description": "This key determines which y-axis the y-coordinates of this trace will reference in the figure.  Values 'y1' and 'y' reference to 'yaxis' in 'layout', 'y2' references to 'yaxis2' in 'layout', and so on. Note that 'y1' will always refer to 'yaxis' or 'yaxis1' in 'layout', they are the same."
            }, 
            "showlegend": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not this trace will be labeled in the legend."
            }, 
            "stream": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object that initializes this trace as a writable-stream, for use with the streaming API."
            }, 
            "visible": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggles whether or not this object will be visible on the rendered figure."
            }, 
            "xsrc": {
                "key_type": "data", 
                "val_types": "a string equal to the unique identifier of a plotly grid column", 
                "required": true, 
                "description": "Sets the data sample to be binned on the x-axis and whose distribution (computed by Plotly) will correspond to the x-coordinates of this 2D histogram trace.", 
                "streamable": true
            }, 
            "ysrc": {
                "key_type": "data", 
                "val_types": "a string equal to the unique identifier of a plotly grid column", 
                "required": true, 
                "description": "Sets the data sample to be binned on the y-axis and whose distribution (computed by Plotly) will correspond to the y-coordinates of this 2D histogram trace.", 
                "streamable": true
            }, 
            "type": {
                "key_type": "plot_info", 
                "val_types": "'histogram2d'", 
                "required": false, 
                "description": "Plotly identifier for this data's trace type. "
            }
        }
    }, 
    "histogram2dcontour": {
        "name": "Histogram2dContour", 
        "obj_type": "dictionary", 
        "parent_keys": [], 
        "docstring": "A dictionary-like object for representing a 2D histogram contour trace in plotly.", 
        "examples": [
            "import numpy as np", 
            "x = np.random.randn(500)", 
            "y = np.random.randn(500)+1", 
            "py.iplot([Histogram2dContour(x=x, y=y)])"
        ], 
        "links": [
            "https://plot.ly/python/2D-Histograms/"
        ], 
        "keymeta": {
            "x": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": true, 
                "description": "Sets the data sample to be binned on the x-axis and whose distribution (computed by Plotly) will correspond to the x-coordinates of this 2D histogram trace.", 
                "streamable": true
            }, 
            "y": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": true, 
                "description": "Sets the data sample to be binned on the y-axis and whose distribution (computed by Plotly) will correspond to the y-coordinates of this 2D histogram trace.", 
                "streamable": true
            }, 
            "histnorm": {
                "key_type": "style", 
                "val_types": "'' | 'percent' | 'probability' | 'density' | 'probability density'", 
                "required": false, 
                "description": "Sets the type of normalization for this histogram trace. By default ('histnorm' set to '') the height of each bar displays the frequency of occurrence, i.e., the number of times this value was found in the corresponding bin. If set to 'percent', the height of each bar displays the percentage of total occurrences found within the corresponding bin. If set to 'probability', the height of each bar displays the probability that an event will fall into the corresponding bin. If set to 'density', the height of each bar is equal to the number of occurrences in a bin divided by the size of the bin interval such that summing the area of all bins will yield the total number of occurrences. If set to 'probability density', the height of each bar is equal to the number of probability that an event will fall into the corresponding bin divided by the size of the bin interval such that summing the area of all bins will yield 1."
            }, 
            "histfunc": {
                "key_type": "style", 
                "val_types": "'count' | 'sum' | 'avg' | 'min' | 'max'", 
                "required": false, 
                "description": "Sets the binning function used for this histogram trace. The default value is 'count' where the histogram values are computed by counting the number of values lying inside each bin. With 'histfunc' set to 'sum', 'avg', 'min' or 'max', the histogram values are computed using the sum, the average, the minimum or the 'maximum' of the values lying inside each bin respectively."
            }, 
            "name": {
                "key_type": "data", 
                "val_types": "a string", 
                "required": false, 
                "description": "The label associated with this trace. This name will appear in the legend, on hover and in the column header in the online spreadsheet."
            }, 
            "autobinx": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the x-axis bin parameters are picked automatically by Plotly. Once 'autobinx' is set to False, the x-axis bins parameters can be declared in 'xbins' object."
            }, 
            "nbinsx": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Specifies the number of x-axis bins. No need to set 'autobinx' to False for 'nbinsx' to apply."
            }, 
            "xbins": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object defining the parameters of x-axis bins of this trace, for example, the bin width and the bins' starting and  ending value. Has an effect only if 'autobinx' is set to False."
            }, 
            "autobiny": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the y-axis bin parameters are picked automatically by Plotly. Once 'autobiny' is set to False, the y-axis bins parameters can be declared in 'ybins' object."
            }, 
            "nbinsy": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Specifies the number of y-axis bins. No need to set 'autobiny' to False for 'nbinsy' to apply."
            }, 
            "ybins": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object defining the parameters of y-axis bins of this trace, for example, the bin width and the bins' starting and  ending value. Has an effect only if 'autobiny' is set to False."
            }, 
            "autocontour": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the contour parameters are picked automatically by Plotly. If False, declare the contours parameters in 'contours'."
            }, 
            "ncontours": {
                "key_type": "style", 
                "val_types": "number: x > 1", 
                "required": false, 
                "description": "Specifies the number of contours lines in the contour plot. No need to set 'autocontour' to False for 'ncontours' to apply."
            }, 
            "contours": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object defining the parameters of the contours of this trace."
            }, 
            "line": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object containing line parameters for contour lines of this contour trace (including line width, dash, color and smoothing level). Has no an effect if 'showlines' is set to False in 'contours'.", 
                "streamable": true
            }, 
            "colorscale": {
                "key_type": "plot_info", 
                "val_types": "list or 1d numpy array of value-color pairs | 'Greys' | 'Greens' | 'Bluered' | 'Hot' | 'Picnic' | 'Portland' | 'Jet' | 'RdBu' | 'Blackbody' | 'Earth' | 'Electric' | 'YIOrRd' | 'YIGnBu'", 
                "required": false, 
                "description": "Sets and/or defines the color scale for this trace. The string values are pre-defined color scales. For custom color scales, define a list or 1d numpy array of value-color pairs where, the first element of the pair corresponds to a normalized value of z from 0-1, i.e. (z-zmin)/ (zmax-zmin), and the second element of pair corresponds to a color. Use with 'zauto', 'zmin' and 'zmax to fine-tune the map from 'z' to rendered colors.", 
                "examples": [
                    "'Greys'", 
                    "[[0, 'rgb(0,0,0)'], [0.5, 'rgb(65, 182, 196)'], [1, 'rgb(255,255,255)']]"
                ]
            }, 
            "reversescale": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the color scale will be reversed."
            }, 
            "showscale": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the color scale associated with this mapping will be shown alongside the figure."
            }, 
            "colorbar": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object defining the parameters of the color bar associated with this trace (including its title, length and width)."
            }, 
            "zauto": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the default values of 'zmax' and 'zmax' can be overwritten."
            }, 
            "zmin": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the minimum 'z' data value to be resolved by the color scale. Its default value is the minimum of the 'z' data values. This value will be used as the minimum in the color scale normalization. For more info see 'colorscale'."
            }, 
            "zmax": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the maximum 'z' data value to be resolved by the color scale. Its default value is the maximum of the 'z' data values. This value will be used as the maximum in the color scale normalization. For more info see 'colorscale'."
            }, 
            "opacity": {
                "key_type": "style", 
                "val_types": "number: x in [0, 1]", 
                "required": false, 
                "description": "Sets the opacity, or transparency, of the entire object, also known as the alpha channel of colors. If the object's color is given in terms of 'rgba' color model, 'opacity' is redundant."
            }, 
            "xaxis": {
                "key_type": "plot_info", 
                "val_types": "'x1' | 'x2' | 'x3' | etc.", 
                "required": false, 
                "description": "This key determines which x-axis the x-coordinates of this trace will reference in the figure.  Values 'x1' and 'x' reference to 'xaxis' in 'layout', 'x2' references to 'xaxis2' in 'layout', and so on. Note that 'x1' will always refer to 'xaxis' or 'xaxis1' in 'layout', they are the same."
            }, 
            "yaxis": {
                "key_type": "plot_info", 
                "val_types": "'y1' | 'y2' | 'y3' | etc.", 
                "required": false, 
                "description": "This key determines which y-axis the y-coordinates of this trace will reference in the figure.  Values 'y1' and 'y' reference to 'yaxis' in 'layout', 'y2' references to 'yaxis2' in 'layout', and so on. Note that 'y1' will always refer to 'yaxis' or 'yaxis1' in 'layout', they are the same."
            }, 
            "showlegend": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not this trace will be labeled in the legend."
            }, 
            "stream": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object that initializes this trace as a writable-stream, for use with the streaming API."
            }, 
            "visible": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggles whether or not this object will be visible on the rendered figure."
            }, 
            "xsrc": {
                "key_type": "data", 
                "val_types": "a string equal to the unique identifier of a plotly grid column", 
                "required": true, 
                "description": "Sets the data sample to be binned on the x-axis and whose distribution (computed by Plotly) will correspond to the x-coordinates of this 2D histogram trace.", 
                "streamable": true
            }, 
            "ysrc": {
                "key_type": "data", 
                "val_types": "a string equal to the unique identifier of a plotly grid column", 
                "required": true, 
                "description": "Sets the data sample to be binned on the y-axis and whose distribution (computed by Plotly) will correspond to the y-coordinates of this 2D histogram trace.", 
                "streamable": true
            }, 
            "type": {
                "key_type": "plot_info", 
                "val_types": "'histogram2dcontour'", 
                "required": false, 
                "description": "Plotly identifier for this data's trace type. "
            }
        }
    }, 
    "area": {
        "name": "Area", 
        "obj_type": "dictionary", 
        "parent_keys": [], 
        "docstring": "A dictionary-like object for representing an area trace in plotly.", 
        "examples": [], 
        "links": [
            "https://plot.ly/python/polar-chart/"
        ], 
        "keymeta": {
            "r": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers", 
                "required": true, 
                "description": "Sets the radial coordinates of the circle sectors in this polar area trace about the origin; that is, the radial extent of each circle sector.", 
                "streamable": true
            }, 
            "t": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": true, 
                "description": "Sets the angular coordinates of the circle sectors in this polar area trace. There are as many sectors as coordinates linked to 't' and 'r'. Each sector is drawn about the coordinates linked to 't', where they spanned symmetrically in both the positive and negative angular directions. The angular extent of each sector is equal to the angular range (360 degree by default) divided by the number of sectors. Note that the sectors are drawn in order; coordinates at the end of the array may overlay the coordinates at the start. By default, the angular coordinates are in degrees (0 to 360) where the angles are measured clockwise about the right-hand side of the origin. To change this behavior, modify 'range' in 'angularaxis' or/and 'direction' in 'layout'. If 't' is linked to a list or 1d numpy array of strings, then the angular coordinates are 0, 360\\N, 2*360/N, ... where N is the number of coordinates given labeled by the list or 1d numpy array of strings linked to 't'.", 
                "streamable": true
            }, 
            "name": {
                "key_type": "data", 
                "val_types": "a string", 
                "required": false, 
                "description": "The label associated with this trace. This name will appear in the legend, on hover and in the column header in the online spreadsheet."
            }, 
            "marker": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object containing marker style of the area sectors of this trace, for example the sector fill color and sector boundary line width and sector boundary color.", 
                "streamable": true
            }, 
            "showlegend": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not this trace will be labeled in the legend."
            }, 
            "stream": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object that initializes this trace as a writable-stream, for use with the streaming API."
            }, 
            "visible": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggles whether or not this object will be visible on the rendered figure."
            }, 
            "angularaxis": {
                "key_type": "plot_info", 
                "val_types": "", 
                "required": false, 
                "description": "Polar chart subplots are not supported yet. Info coming soon"
            }, 
            "radialaxis": {
                "key_type": "plot_info", 
                "val_types": "", 
                "required": false, 
                "description": "Polar chart subplots are not supported yet. Info coming soon"
            }, 
            "type": {
                "key_type": "plot_info", 
                "val_types": "'area'", 
                "required": false, 
                "description": "Plotly identifier for this data's trace type. "
            }
        }
    }, 
    "scatter3d": {
        "name": "Scatter3d", 
        "obj_type": "dictionary", 
        "parent_keys": [], 
        "docstring": "A dictionary-like object for representing a 3D scatter trace in plotly.", 
        "examples": [], 
        "links": [], 
        "keymeta": {
            "x": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes or list of lists or 2d numpy array of numbers", 
                "required": true, 
                "description": "Sets the x coordinates of the points of this 3D scatter trace. If 'x' is linked to a list or 1d numpy array of strings, then the x coordinates are integers, 0, 1, 2, 3, ..., labeled on the x-axis by the list or 1d numpy array of strings linked to 'x'.", 
                "streamable": true
            }, 
            "y": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes or list of lists or 2d numpy array of numbers", 
                "required": true, 
                "description": "Sets the y coordinates of the points of this 3D scatter trace. If 'y' is linked to a list or 1d numpy array of strings, then the y coordinates are integers, 0, 1, 2, 3, ..., labeled on the y-axis by the list or 1d numpy array of strings linked to 'y'.", 
                "streamable": true
            }, 
            "z": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes or list of lists or 2d numpy array of numbers", 
                "required": true, 
                "description": "Sets the z coordinates of the points of this scatter trace. If 'z' is linked to a list or 1d numpy array of strings, then the z coordinates are integers, 0, 1, 2, 3, ..., labeled on the z-axis by the list or 1d numpy array of strings linked to 'z'.", 
                "streamable": true
            }, 
            "mode": {
                "key_type": "plot_info", 
                "val_types": "'lines' | 'markers' | 'text' | 'lines+markers' | 'lines+text' | 'markers+text' | 'lines+markers+text'", 
                "required": false, 
                "description": "Plotting mode for this 3D scatter trace. If the mode includes 'text' then the 'text' will appear at the (x,y) points, otherwise it will appear on hover."
            }, 
            "name": {
                "key_type": "data", 
                "val_types": "a string", 
                "required": false, 
                "description": "The label associated with this trace. This name will appear in the column header in the online spreadsheet."
            }, 
            "text": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of strings", 
                "required": false, 
                "description": "The text elements associated with each (x,y,z) pair in this 3D scatter trace. If the scatter 'mode' does not include 'text' then elements linked to 'text' will appear on hover only. In contrast, if 'text' is included in 'mode', the elements in 'text' will be rendered on the plot at the locations specified in part by their corresponding (x,y,z) coordinate pair and the 'textposition' key.", 
                "streamable": true
            }, 
            "error_z": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing the z-axis error bars that can be drawn from the (x,y,z) coordinates of this 3D scatter trace.", 
                "streamable": true
            }, 
            "error_y": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing the y-axis error bars that can be drawn from the (x,y,z) coordinates of this 3D scatter trace.", 
                "streamable": true
            }, 
            "error_x": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing the x-axis error bars that can be drawn from the (x,y,z) coordinates of this 3D scatter trace.", 
                "streamable": true
            }, 
            "marker": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object containing marker style parameters for this 3D scatter trace. Has an effect only if 'mode' contains 'markers'.", 
                "streamable": true
            }, 
            "line": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object containing line parameters for this 3D scatter trace. Has an effect only if 'mode' contains 'lines'.", 
                "streamable": true
            }, 
            "textposition": {
                "key_type": "style", 
                "val_types": "'top left' | 'top' (or 'top center')| 'top right' | 'left' (or 'middle left') | '' (or 'middle center') | 'right' (or 'middle right') | 'bottom left' | 'bottom' (or 'bottom center') | 'bottom right'", 
                "required": false, 
                "description": "Sets the position of the text elements in the 'text' key with respect to the data points. By default, the text elements are plotted directly at the (x,y,z) coordinates."
            }, 
            "scene": {
                "key_type": "plot_info", 
                "val_types": "'scene1' | 'scene2' | 'scene3' | etc.", 
                "required": false, 
                "description": "This key determines the scene on which this trace will be plotted in."
            }, 
            "stream": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object that initializes this trace as a writable-stream, for use with the streaming API."
            }, 
            "visible": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggles whether or not this object will be visible on the rendered figure."
            }, 
            "type": {
                "key_type": "plot_info", 
                "val_types": "'scatter3d'", 
                "required": false, 
                "description": "Plotly identifier for this data's trace type. "
            }
        }
    }, 
    "surface": {
        "name": "Surface", 
        "obj_type": "dictionary", 
        "parent_keys": [], 
        "docstring": "A dictionary-like object for representing a 3D surface trace in plotly.", 
        "examples": [], 
        "links": [], 
        "keymeta": {
            "z": {
                "key_type": "data", 
                "val_types": "list of lists or 2d numpy array of numbers", 
                "required": true, 
                "description": "Sets the surface coordinates. Say the dimensions of the list of lists or 2d numpy array linked to 'z' has n rows and m columns then the resulting contour will have n coordinates along the y-axis and m coordinates along the x-axis. Therefore, the i-th row/ j-th column cell in the list of lists or 2d numpy array linked to 'z' is mapped to the i-th partition of the y-axis and the j-th partition of the x-axis ", 
                "streamable": true
            }, 
            "x": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes or list of lists or 2d numpy array of numbers", 
                "required": false, 
                "description": "Sets the horizontal coordinates referring to the columns of the list of lists or 2d numpy array linked to 'z'. If the 'z' is a list or 1d numpy array of strings, then the x-labels are spaced evenly. If the dimensions of the list of lists or 2d numpy array linked to 'z' are (n x m), the length of the 'x' array should equal m.", 
                "streamable": true
            }, 
            "y": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes or list of lists or 2d numpy array of numbers", 
                "required": false, 
                "description": "Sets the vertical coordinates referring to the rows of the list of lists or 2d numpy array linked to 'z'. If strings, the y-labels are spaced evenly. If the dimensions of the list of lists or 2d numpy array linked to 'z' are (n x m), the length of the 'y' array should equal n.", 
                "streamable": true
            }, 
            "name": {
                "key_type": "data", 
                "val_types": "a string", 
                "required": false, 
                "description": "The label associated with this trace. This name will appear in the column header in the online spreadsheet."
            }, 
            "colorscale": {
                "key_type": "plot_info", 
                "val_types": "list or 1d numpy array of value-color pairs | 'Greys' | 'Greens' | 'Bluered' | 'Hot' | 'Picnic' | 'Portland' | 'Jet' | 'RdBu' | 'Blackbody' | 'Earth' | 'Electric' | 'YIOrRd' | 'YIGnBu'", 
                "required": false, 
                "description": "Sets and/or defines the color scale for this trace. The string values are pre-defined color scales. For custom color scales, define a list or 1d numpy array of value-color pairs where, the first element of the pair corresponds to a normalized value of z from 0-1, i.e. (z-zmin)/ (zmax-zmin), and the second element of pair corresponds to a color. Use with 'zauto', 'zmin' and 'zmax to fine-tune the map from 'z' to rendered colors.", 
                "examples": [
                    "'Greys'", 
                    "[[0, 'rgb(0,0,0)'], [0.5, 'rgb(65, 182, 196)'], [1, 'rgb(255,255,255)']]"
                ]
            }, 
            "scene": {
                "key_type": "plot_info", 
                "val_types": "'scene1' | 'scene2' | 'scene3' | etc.", 
                "required": false, 
                "description": "This key determines the scene on which this trace will be plotted in."
            }, 
            "stream": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object that initializes this trace as a writable-stream, for use with the streaming API."
            }, 
            "visible": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggles whether or not this object will be visible on the rendered figure."
            }, 
            "type": {
                "key_type": "plot_info", 
                "val_types": "'surface'", 
                "required": false, 
                "description": "Plotly identifier for this data's trace type. "
            }
        }
    }, 
    "error_y": {
        "name": "ErrorY", 
        "obj_type": "dictionary", 
        "parent_keys": [
            "error_y"
        ], 
        "docstring": "A dictionary-like object object representing a set of error bar spanning along the y-axis.", 
        "examples": [], 
        "links": [
            "https://plot.ly/python/error-bars/"
        ], 
        "keymeta": {
            "type": {
                "key_type": "plot_info", 
                "val_types": "'data' | 'percent' | 'constant' | 'sqrt'", 
                "required": false, 
                "description": "Specify how the 'value' or 'array' key in this error bar will be used to render the bars. Using 'data' will set error bar lengths to the actual numbers specified in 'array'.  Using 'percent' will set bar lengths to the percent of error associated with 'value'. Using 'constant' will set each error bar length to the single value specified in 'value'. Using 'sqrt' will set each error bar length to the square root of the x data at each point ('value' and 'array' do not apply)."
            }, 
            "symmetric": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not error bars are the same length in both directions (up and down). If not specified, the error bars will be symmetric."
            }, 
            "array": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": false, 
                "description": "The array corresponding to the span of the error bars. Has only an effect if 'type' is set to 'data'. Values in the array are plotted relative to the 'y' coordinates. For example, with 'y'=[1,2] and 'array'=[1,2], the error bars will span from y= 0 to 2 and y= 0 to 4 if 'symmetric' is set to True; and from y= 1 to 2 and y= 2 to 4 if 'symmetric' is set to False and 'arrayminus' is empty."
            }, 
            "value": {
                "key_type": "plot_info", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "The value or percentage determining the error bars' span, at all trace coordinates. Has an effect if 'type' is set to 'value' or 'percent'. If 'symmetric' is set to False, this value corresponds to the span above the trace of coordinates. To specify multiple error bar lengths, you should set 'type' to 'data' and use the 'array' key instead."
            }, 
            "arrayminus": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": false, 
                "description": "Has an effect only when 'symmetric' is set to False. Same as 'array' but corresponding to the span of the error bars below the trace coordinates"
            }, 
            "valueminus": {
                "key_type": "plot_info", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Has an effect only when 'symmetric' is set to False. Same as 'value' but corresponding to the span of the error bars below the trace coordinates"
            }, 
            "color": {
                "val_types": "a string describing color", 
                "description": "Sets the color of the error bars.", 
                "required": false, 
                "streamable": true, 
                "key_type": "style", 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ]
            }, 
            "thickness": {
                "key_type": "style", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Sets the line thickness of the y error bars."
            }, 
            "width": {
                "key_type": "style", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Sets the width (in pixels) of the cross-bar at both ends of the error bars."
            }, 
            "opacity": {
                "key_type": "style", 
                "val_types": "number: x in [0, 1]", 
                "required": false, 
                "description": "Sets the opacity, or transparency, of the entire object, also known as the alpha channel of colors. If the object's color is given in terms of 'rgba' color model, 'opacity' is redundant."
            }, 
            "visible": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggles whether or not this object will be visible on the rendered figure."
            }
        }
    }, 
    "error_x": {
        "name": "ErrorX", 
        "obj_type": "dictionary", 
        "parent_keys": [
            "error_x"
        ], 
        "docstring": "A dictionary-like object representing a set of error bars spanning along the x-axis.", 
        "examples": [], 
        "links": [
            "https://plot.ly/python/error-bars/"
        ], 
        "keymeta": {
            "type": {
                "key_type": "plot_info", 
                "val_types": "'data' | 'percent' | 'constant' | 'sqrt'", 
                "required": false, 
                "description": "Specify how the 'value' or 'array' key in this error bar will be used to render the bars. Using 'data' will set error bar lengths to the actual numbers specified in 'array'.  Using 'percent' will set bar lengths to the percent of error associated with 'value'. Using 'constant' will set each error bar length to the single value specified in 'value'. Using 'sqrt' will set each error bar length to the square root of the x data at each point ('value' and 'array' do not apply)."
            }, 
            "symmetric": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not error bars are the same length in both directions (right and left). If not specified, the error bars will be symmetric."
            }, 
            "array": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": false, 
                "description": "The array corresponding to the span of the error bars. Has only an effect if 'type' is set to 'data'. Values in the array are plotted relative to the 'x' coordinates. For example, with 'x'=[1,2] and 'array'=[1,2], the error bars will span from x= 0 to 2 and x= 0 to 4 if 'symmetric' is set to True; and from x= 1 to 2 and x= 2 to 4 if 'symmetric' is set to False and 'arrayminus' is empty."
            }, 
            "value": {
                "key_type": "plot_info", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "The value or percentage determining the error bars' span, at all trace coordinates. Has an effect if 'type' is set to 'value' or 'percent'. If 'symmetric' is set to False, this value corresponds to the span right of the trace of coordinates. To specify multiple error bar lengths, you should set 'type' to 'data' and use the 'array' key instead."
            }, 
            "arrayminus": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": false, 
                "description": "Has an effect only when 'symmetric' is set to False. Same as 'array' but corresponding to the span of the error bars left of the trace coordinates"
            }, 
            "valueminus": {
                "key_type": "plot_info", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Has an effect only when 'symmetric' is set to False. Same as 'value' but corresponding to the span of the error bars left of the trace coordinates"
            }, 
            "color": {
                "val_types": "a string describing color", 
                "description": "Sets the color of the error bars.", 
                "required": false, 
                "streamable": true, 
                "key_type": "style", 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ]
            }, 
            "thickness": {
                "key_type": "style", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Sets the line thickness of the x error bars."
            }, 
            "width": {
                "key_type": "style", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Sets the width (in pixels) of the cross-bar at both ends of the error bars."
            }, 
            "opacity": {
                "key_type": "style", 
                "val_types": "number: x in [0, 1]", 
                "required": false, 
                "description": "Sets the opacity, or transparency, of the entire object, also known as the alpha channel of colors. If the object's color is given in terms of 'rgba' color model, 'opacity' is redundant."
            }, 
            "copy_ystyle": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether to set x error bar style to the same style (color, thickness, width, opacity) as y error bars set in 'yaxis'."
            }, 
            "visible": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggles whether or not this object will be visible on the rendered figure."
            }
        }
    }, 
    "xbins": {
        "name": "XBins", 
        "obj_type": "dictionary", 
        "parent_keys": [
            "xbins"
        ], 
        "docstring": "A dictionary-like object containing specifications of the bins lying along the x-axis.", 
        "examples": [], 
        "links": [
            "https://plot.ly/python/histograms/", 
            "https://plot.ly/python/2D-Histograms/"
        ], 
        "keymeta": {
            "start": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the starting point on the x-axis for the first bin."
            }, 
            "end": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the end point on the x-axis for the last bin."
            }, 
            "size": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the size (i.e. their width) of each x-axis bin.", 
                "streamable": true
            }
        }
    }, 
    "ybins": {
        "name": "YBins", 
        "obj_type": "dictionary", 
        "parent_keys": [
            "ybins"
        ], 
        "docstring": "A dictionary-like object containing specifications of the bins lying along the y-axis.", 
        "examples": [], 
        "links": [
            "https://plot.ly/python/histograms/", 
            "https://plot.ly/python/2D-Histograms/"
        ], 
        "keymeta": {
            "start": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the starting point on the y-axis for the first bin."
            }, 
            "end": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the end point on the y-axis for the last bin."
            }, 
            "size": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the size (i.e. their width) of each y-axis bin.", 
                "streamable": true
            }
        }
    }, 
    "marker": {
        "name": "Marker", 
        "obj_type": "dictionary", 
        "parent_keys": [
            "marker"
        ], 
        "docstring": "A dictionary-like object containing specifications of the marker points.", 
        "examples": [], 
        "links": [
            "https://plot.ly/python/line-and-scatter/", 
            "https://plot.ly/python/bubble-charts/"
        ], 
        "keymeta": {
            "color": {
                "val_types": "list or 1d numpy array of string describing color", 
                "description": "Sets the color of the face of the marker object. If 'color' is linked to a list or 1d numpy array of color strings, color values are mapped to individual marker points in the same order as in the data lists or arrays. To set the color of the marker's bordering line, use 'line' in 'marker'. The 'color' key can also accept list or 1d numpy array of numbers, where each number is then mapped to a color using the color scale set in 'colorscale'.", 
                "required": false, 
                "streamable": true, 
                "key_type": "style", 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ]
            }, 
            "size": {
                "key_type": "style", 
                "val_types": "number: x > 0, or list of these numbers", 
                "required": false, 
                "description": "Sets the size of the markers (in pixels). If 'size' is linked to a list or 1d numpy array of numbers, size values are mapped to individual marker points in the same order as in the 'x', 'y (or 'z') list or 1d numpy array. In this case, use 'size' in conjunction with 'sizeref' and 'sizemode' to fine-tune the map from the numbers linked to 'size' and the marker points' rendered sizes.", 
                "streamable": true
            }, 
            "symbol": {
                "key_type": "plot_info", 
                "val_types": "'dot' | 'cross' | 'diamond' | 'square' | 'triangle-down' | 'triangle-left' | 'triangle-right' | 'triangle-up' | 'x' OR list of these string values", 
                "required": false, 
                "description": "The symbol that is drawn on the plot for each marker. Supported only in scatter traces. If 'symbol' is linked to a list or 1d numpy array, the symbol values are mapped to individual marker points in the same order as in the list or 1d numpy array linked to 'x', 'y' (or 'z')."
            }, 
            "line": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object containing line parameters for the line segments associated with this marker. For example, the line segments around each marker point in a scatter trace or the line segments around each bar in a bar trace.", 
                "streamable": true
            }, 
            "opacity": {
                "key_type": "style", 
                "val_types": "number: x in [0, 1], or list of these numbers", 
                "required": false, 
                "description": "Sets the opacity, or transparency also known as the alpha channel of colors) of the marker points. If the marker points' color is given in terms of 'rgba' color model, this does not need to be defined. If 'opacity' is linked to a list or an array of numbers, opacity values are mapped to individual marker points in the same order as in the 'x', 'y' (or 'z') list or 1d numpy array."
            }, 
            "sizeref": {
                "key_type": "style", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Sets the scale factor used to determine the rendered size of each marker point in this trace. Applies only to scatter traces that have their 'size' key in 'marker' linked to a list or 1d numpy array. If set, the value linked to 'sizeref' is used to divide each entry linked to 'size'. Specifically, setting 'sizeref' to less (greater) than 1, increases (decreases) the rendered marker sizes."
            }, 
            "sizemode": {
                "key_type": "style", 
                "val_types": "'diameter'| 'area'", 
                "required": false, 
                "description": "Choose between marker size scaling options for the marker points in this trace. Applies only to scatter traces that have their 'size' key in 'marker' linked to a list or 1d numpy array. If 'diameter' ('area'), then the diameter (area) of the rendered marker points (in pixels) are proportional to the numbers linked to 'size'.For example, set 'sizemode' to 'area' for a more a smaller range of rendered marker sizes."
            }, 
            "colorscale": {
                "key_type": "plot_info", 
                "val_types": "list or 1d numpy array of value-color pairs | 'Greys' | 'Greens' | 'Bluered' | 'Hot' | 'Picnic' | 'Portland' | 'Jet' | 'RdBu' | 'Blackbody' | 'Earth' | 'Electric' | 'YIOrRd' | 'YIGnBu'", 
                "required": false, 
                "description": "Sets and/or defines the color scale for this trace. The string values are pre-defined color scales. For custom color scales, define a list or 1d numpy array of value-color pairs where, the first element of the pair corresponds to a normalized value of color from 0-1, i.e. (c-cmin)/ (cmax-cmin), and the second element of pair corresponds to a color. Use with 'cauto', 'cmin' and 'cmax to fine-tune the map from 'color' to rendered colors.", 
                "examples": [
                    "'Greys'", 
                    "[[0, 'rgb(0,0,0)'], [0.5, 'rgb(65, 182, 196)'], [1, 'rgb(255,255,255)']]"
                ]
            }, 
            "cauto": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the default values of 'cmax' and 'cmax' can be overwritten."
            }, 
            "cmin": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the minimum 'color' data value to be resolved by the color scale. Its default value is the minimum of the 'color' data values. This value will be used as the minimum in the color scale normalization. For more info see 'colorscale'. Has only an effect if 'color' is linked to a list or 1d numpy array nd 'colorscale' is set."
            }, 
            "cmax": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the maximum 'color' data value to be resolved by the color scale. Its default value is the maximum of the 'color' data values. This value will be used as the maximum in the color scale normalization. For more info see 'colorscale'. Has only an effect if 'color' is linked to a list or 1d numpy array nd 'colorscale' is set."
            }, 
            "outliercolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ], 
                "description": "For box plots only. Has an effect only if 'boxpoints' is set to 'suspectedoutliers'. Sets the face color of the outlier points."
            }, 
            "maxdisplayed": {
                "key_type": "style", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Sets maximum number of displayed points for this trace. Applies only to scatter traces."
            }
        }
    }, 
    "line": {
        "name": "Line", 
        "obj_type": "dictionary", 
        "parent_keys": [
            "line"
        ], 
        "docstring": "A dictionary-like object containing specifications of the line segments.", 
        "examples": [], 
        "links": [
            "https://plot.ly/python/line-and-scatter/", 
            "https://plot.ly/python/filled-area-plots/", 
            "https://plot.ly/python/contour-plots/"
        ], 
        "keymeta": {
            "color": {
                "val_types": "a string describing color", 
                "description": "Sets the color of the line object. If linked within 'marker', sets the color of the marker's bordering line. If linked within, 'contours', sets the color of the contour lines.", 
                "required": false, 
                "streamable": true, 
                "key_type": "style", 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ]
            }, 
            "width": {
                "key_type": "style", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Sets the width (in pixels) of the line segments in question."
            }, 
            "dash": {
                "key_type": "style", 
                "val_types": "'dash' | 'dashdot' | 'dot' | 'solid'", 
                "required": false, 
                "description": "Sets the drawing style of the lines segments in this trace."
            }, 
            "opacity": {
                "key_type": "style", 
                "val_types": "number: x in [0, 1]", 
                "required": false, 
                "description": "Sets the opacity, or transparency, of the entire object, also known as the alpha channel of colors. If the object's color is given in terms of 'rgba' color model, 'opacity' is redundant."
            }, 
            "shape": {
                "key_type": "style", 
                "val_types": "'linear' | 'spline' | 'hv' | 'vh' | 'hvh' | 'vhv'", 
                "required": false, 
                "description": "Choose the line shape between each coordinate pair in this trace. Applies only to scatter traces. The default value is 'linear'. If set to 'spline', then the lines are drawn using spline interpolation between the coordinate pairs. The remaining available values correspond to step-wise line shapes."
            }, 
            "smoothing": {
                "key_type": "style", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Sets the amount of smoothing applied to the lines segments in this trace. Applies only to contour traces and scatter traces if 'shape' is set to 'spline'. The default value is 1. If 'smoothing' is set to 0, then no smoothing is applied. Set 'smoothing' to a value less (greater) than 1 for a less (more) pronounced line smoothing."
            }, 
            "outliercolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ], 
                "description": "For box plots only. Has an effect only if 'boxpoints' is set to 'suspectedoutliers'. Sets the color of the bordering line of the outlier points."
            }, 
            "outlierwidth": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ], 
                "description": "For box plots only. Has an effect only if 'boxpoints' is set to 'suspectedoutliers'. Sets the width in pixels of bordering line of the outlier points."
            }
        }
    }, 
    "contours": {
        "name": "Contours", 
        "obj_type": "dictionary", 
        "parent_keys": [
            "contours"
        ], 
        "docstring": "A dictionary-like object containing specifications of the contours.", 
        "examples": [], 
        "links": [
            "https://plot.ly/python/contour-plots/"
        ], 
        "keymeta": {
            "showlines": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the contour lines appear on the plot."
            }, 
            "start": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the value of the first contour level."
            }, 
            "end": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the value of the last contour level."
            }, 
            "size": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the size of each contour level.", 
                "streamable": true
            }, 
            "coloring": {
                "key_type": "style", 
                "val_types": " 'fill' | 'heatmap' | 'lines' | 'none' ", 
                "required": false, 
                "description": "Choose the coloring method for this contour trace. The default value is 'fill' where coloring is done evenly between each contour line. 'heatmap' colors on a grid point-by-grid point basis. 'lines' colors only the contour lines, each with respect to the color scale. 'none' prints all contour lines with the same color; choose their color in a Line object at the trace level if desired."
            }
        }
    }, 
    "colorbar": {
        "name": "ColorBar", 
        "obj_type": "dictionary", 
        "parent_keys": [
            "colorbar"
        ], 
        "docstring": "A dictionary-like object object for representing a color bar in plotly.", 
        "examples": [], 
        "links": [], 
        "keymeta": {
            "title": {
                "key_type": "plot_info", 
                "val_types": "a string", 
                "required": false, 
                "description": "The title of the colorbar."
            }, 
            "titleside": {
                "key_type": "style", 
                "val_types": "'right' | 'top' | 'bottom'", 
                "required": false, 
                "description": "Location of colorbar title with respect to the colorbar."
            }, 
            "titlefont": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing the font settings of the colorbar title."
            }, 
            "thickness": {
                "key_type": "style", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Sets the thickness of the line surrounding the colorbar."
            }, 
            "thicknessmode": {
                "key_type": "style", 
                "val_types": "string: 'pixels' | 'fraction' ", 
                "required": false, 
                "description": "Sets thickness unit mode."
            }, 
            "len": {
                "key_type": "style", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Sets the length of the colorbar."
            }, 
            "lenmode": {
                "key_type": "style", 
                "val_types": "string: 'pixels' | 'fraction' ", 
                "required": false, 
                "description": "Sets length unit mode."
            }, 
            "autotick": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the colorbar ticks parameters are picked automatically by Plotly. Once 'autotick' is set to False, the colorbar ticks parameters can be declared with 'ticks', 'tick0', 'dtick0' and other tick-related key in this colorbar object."
            }, 
            "nticks": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the number of colorbar ticks. No need to set 'autoticks' to False for 'nticks' to apply."
            }, 
            "ticks": {
                "key_type": "style", 
                "val_types": "'' | 'inside' | 'outside'", 
                "required": false, 
                "description": "Sets the format of the ticks on this colorbar. For hidden ticks, link 'ticks' to an empty string."
            }, 
            "showticklabels": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the colorbar ticks will feature tick labels."
            }, 
            "tick0": {
                "key_type": "style", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the starting point of the ticks of this colorbar."
            }, 
            "dtick": {
                "key_type": "style", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the distance between ticks on this colorbar."
            }, 
            "ticklen": {
                "key_type": "style", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the length of the tick lines on this colorbar."
            }, 
            "tickwidth": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the width of the tick lines on this colorbar."
            }, 
            "tickcolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ], 
                "description": "Sets the color of the tick lines on this colorbar."
            }, 
            "tickangle": {
                "key_type": "style", 
                "val_types": "number: x in [-90, 90]", 
                "required": false, 
                "description": "Sets the angle in degrees of the ticks on this colorbar."
            }, 
            "tickfont": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object defining the parameters of the ticks' font."
            }, 
            "exponentformat": {
                "key_type": "style", 
                "val_types": "'none' | 'e' | 'E' | 'power' | 'SI' | 'B'", 
                "required": false, 
                "description": "Sets how exponents show up. Here's how the number 1000000000 (1 billion) shows up in each. If set to 'none': 1,000,000,000. If set to 'e': 1e+9. If set to 'E': 1E+9. If set to 'power': 1x10^9 (where the 9 will appear super-scripted). If set to 'SI': 1G. If set to 'B': 1B (useful when referring to currency)."
            }, 
            "showexponent": {
                "key_type": "style", 
                "val_types": "'all' | 'first' | 'last' | 'none'", 
                "required": false, 
                "description": "If set to 'all', ALL exponents will be shown appended to their significands. If set to 'first', the first tick's exponent will be appended to its significand, however no other exponents will appear--only the significands. If set to 'last', the last tick's exponent will be appended to its significand, however no other exponents will appear--only the significands. If set to 'none', no exponents will appear, only the significands."
            }, 
            "x": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the 'x' position of this colorbar."
            }, 
            "y": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the 'y' position of this colorbar."
            }, 
            "xanchor": {
                "key_type": "plot_info", 
                "val_types": "'auto' | 'left' | 'center' | 'right'", 
                "required": false, 
                "description": "Sets the horizontal position anchor of this colorbar. That is, bind the position set with the 'x' key to the 'left' or 'center' or 'right' of this colorbar."
            }, 
            "yanchor": {
                "key_type": "plot_info", 
                "val_types": "'auto' | 'bottom' | 'middle' | 'top'", 
                "required": false, 
                "description": "Sets the vertical position anchor of this colorbar. That is, bind the position set with the 'y' key to the 'bottom' or 'middle' or 'top' of this colorbar."
            }, 
            "bgcolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "description": "Sets the background (bg) color of this colorbar.", 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ]
            }, 
            "outlinecolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "description": "The color of the outline surrounding this colorbar.", 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ]
            }, 
            "outlinewidth": {
                "key_type": "style", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the width of the outline surrounding this colorbar."
            }, 
            "bordercolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "description": "Sets the color of the enclosing boarder of this colorbar.", 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ]
            }, 
            "borderwidth": {
                "key_type": "style", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Sets the width of the boarder enclosing this colorbar"
            }, 
            "xpad": {
                "key_type": "plot_info", 
                "val_types": "number: x in [0, 50]", 
                "required": false, 
                "description": "Sets the amount of space (padding) between the colorbar and the enclosing boarder in the x-direction."
            }, 
            "ypad": {
                "key_type": "plot_info", 
                "val_types": "number: x in [0, 50]", 
                "required": false, 
                "description": "Sets the amount of space (padding) between the colorbar and the enclosing boarder in the y-direction."
            }
        }
    }, 
    "stream": {
        "name": "Stream", 
        "obj_type": "dictionary", 
        "parent_keys": [
            "stream"
        ], 
        "docstring": "A dictionary-like object containing specifications of the data stream.", 
        "examples": [], 
        "links": [
            "https://plot.ly/python/streaming/"
        ], 
        "keymeta": {
            "token": {
                "key_type": "plot_info", 
                "val_types": "A stream id number, see https://plot.ly/settings", 
                "required": true, 
                "description": "The stream id number links a data trace on a plot with a stream. In other words, any data trace you create can reference a 'stream'. If you stream data to Plotly with the same stream id (token), Plotly knows update this data object with the incoming data stream."
            }, 
            "maxpoints": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the maximum number of points to keep on the plots from an incoming stream. For example, if 'maxpoints' is set to 50, only the newest 50 points will be displayed on the plot."
            }
        }
    }, 
    "error_z": {
        "name": "ErrorZ", 
        "obj_type": "dictionary", 
        "parent_keys": [
            "error_z"
        ], 
        "docstring": "A dictionary-like object representing a set of error bars spanning along the z-axis in a 3D plot.", 
        "examples": [], 
        "links": [], 
        "keymeta": {
            "type": {
                "key_type": "plot_info", 
                "val_types": "'data' | 'percent' | 'constant' | 'sqrt'", 
                "required": false, 
                "description": "Specify how the 'value' or 'array' key in this error bar will be used to render the bars. Using 'data' will set error bar lengths to the actual numbers specified in 'array'.  Using 'percent' will set bar lengths to the percent of error associated with 'value'. Using 'constant' will set each error bar length to the single value specified in 'value'. Using 'sqrt' will set each error bar length to the square root of the x data at each point ('value' and 'array' do not apply)."
            }, 
            "symmetric": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not error bars are the same length in both directions (positive z and negative z). If not specified, the error bars will be symmetric."
            }, 
            "array": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": false, 
                "description": "The array corresponding to the span of the error bars. Has only an effect if 'type' is set to 'data'. Values in the array are plotted relative to the 'z' coordinates. For example, with 'z'=[1,2] and 'array'=[1,2], the error bars will span from z= 0 to 2 and z= 0 to 4 if 'symmetric' is set to True; and from z= 1 to 2 and z= 2 to 4 if 'symmetric' is set to False and 'arrayminus' is empty."
            }, 
            "value": {
                "key_type": "plot_info", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "The value or percentage determining the error bars' span, at all trace coordinates. Has an effect if 'type' is set to 'value' or 'percent'. If 'symmetric' is set to False, this value corresponds to the span above the trace of coordinates. To specify multiple error bar lengths, you should set 'type' to 'data' and use the 'array' key instead."
            }, 
            "arrayminus": {
                "key_type": "data", 
                "val_types": "list or 1d numpy array of numbers, strings, datetimes", 
                "required": false, 
                "description": "Has an effect only when 'symmetric' is set to False. Same as 'array' but corresponding to the span of the error bars below the trace coordinates"
            }, 
            "valueminus": {
                "key_type": "plot_info", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Has an effect only when 'symmetric' is set to False. Same as 'value' but corresponding to the span of the error bars below the trace coordinates"
            }, 
            "color": {
                "val_types": "a string describing color", 
                "description": "Sets the color of the error bars.", 
                "required": false, 
                "streamable": true, 
                "key_type": "style", 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ]
            }, 
            "thickness": {
                "key_type": "style", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Sets the line thickness of the z error bars."
            }, 
            "width": {
                "key_type": "style", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Sets the width (in pixels) of the cross-bar at both ends of the error bars."
            }, 
            "opacity": {
                "key_type": "style", 
                "val_types": "number: x in [0, 1]", 
                "required": false, 
                "description": "Sets the opacity, or transparency, of the entire object, also known as the alpha channel of colors. If the object's color is given in terms of 'rgba' color model, 'opacity' is redundant."
            }, 
            "visible": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggles whether or not this object will be visible on the rendered figure."
            }
        }
    }, 
    "xaxis": {
        "name": "XAxis", 
        "obj_type": "dictionary", 
        "parent_keys": [
            "xaxis"
        ], 
        "docstring": "A dictionary-like object for representing an x-axis in plotly.", 
        "examples": [], 
        "links": [
            "https://plot.ly/python/axes/", 
            "https://plot.ly/python/multiple-axes/", 
            "https://plot.ly/python/subplots/", 
            "https://plot.ly/python/insets/"
        ], 
        "keymeta": {
            "title": {
                "key_type": "plot_info", 
                "val_types": "a string", 
                "required": false, 
                "description": "The x-axis title."
            }, 
            "titlefont": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing the font settings of the x-axis title."
            }, 
            "range": {
                "key_type": "style", 
                "val_types": "number array of length 2", 
                "required": false, 
                "description": "Defines the start and end point of this x-axis.", 
                "examples": [
                    "[-13, 20]", 
                    "[0, 1]"
                ]
            }, 
            "domain": {
                "key_type": "plot_info", 
                "val_types": "number array of length 2", 
                "required": false, 
                "description": "Sets the domain of this x-axis; that is, the available space for this x-axis to live in. Domain coordinates are given in normalized coordinates with respect to the paper.", 
                "examples": [
                    "[0, 0.4]", 
                    "[0.6, 1]"
                ]
            }, 
            "type": {
                "key_type": "plot_info", 
                "val_types": "'linear' | 'log' | 'date' | 'category'", 
                "required": false, 
                "description": "Sets the format of this axis."
            }, 
            "rangemode": {
                "key_type": "style", 
                "val_types": "'normal' | 'tozero' | 'nonnegative'", 
                "required": false, 
                "description": "Choose between Plotly's automated axis generation modes: 'normal' (the default) sets the axis range in relation to the extrema in the data object, 'tozero' extends the axes to x=0 no matter the data plotted and 'nonnegative' sets a non-negative range no matter the data plotted."
            }, 
            "autorange": {
                "key_type": "style", 
                "val_types": "True | False | 'reversed'", 
                "required": false, 
                "description": "Toggle whether or not the range of this x-axis is automatically picked by Plotly. If 'range' is set, then 'autorange' is set to False automatically. Otherwise, if 'autorange' is set to True (the default behavior), the range of this x-axis can respond to adjustments made in the web GUI automatically. If 'autorange' is set to 'reversed', then this x-axis is drawn in reverse, e.g. in a 2D plot, from right to left instead of from left to right (the default behavior)."
            }, 
            "showgrid": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not this axis features grid lines."
            }, 
            "zeroline": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not an additional grid line (thicker than the other grid lines, by default) will appear on this axis along x=0."
            }, 
            "showline": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the line bounding this x-axis will be shown on the figure."
            }, 
            "autotick": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the axis ticks parameters are picked automatically by Plotly. Once 'autotick' is set to False, the axis ticks parameters can be declared with 'ticks', 'tick0', 'dtick0' and other tick-related key in this axis object."
            }, 
            "nticks": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the number of axis ticks. No need to set 'autoticks' to False for 'nticks' to apply."
            }, 
            "ticks": {
                "key_type": "style", 
                "val_types": "'' | 'inside' | 'outside'", 
                "required": false, 
                "description": "Sets the format of the ticks on this axis. For hidden ticks, link 'ticks' to an empty string."
            }, 
            "showticklabels": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the axis ticks will feature tick labels."
            }, 
            "tick0": {
                "key_type": "style", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the starting point of the ticks of this axis."
            }, 
            "dtick": {
                "key_type": "style", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the distance between ticks on this axis."
            }, 
            "ticklen": {
                "key_type": "style", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the length of the tick lines on this axis."
            }, 
            "tickwidth": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the width of the tick lines on this axis."
            }, 
            "tickcolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ], 
                "description": "Sets the color of the tick lines on this axis."
            }, 
            "tickangle": {
                "key_type": "style", 
                "val_types": "number: x in [-90, 90]", 
                "required": false, 
                "description": "Sets the angle in degrees of the ticks on this axis."
            }, 
            "tickfont": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object defining the parameters of the ticks' font."
            }, 
            "exponentformat": {
                "key_type": "style", 
                "val_types": "'none' | 'e' | 'E' | 'power' | 'SI' | 'B'", 
                "required": false, 
                "description": "Sets how exponents show up. Here's how the number 1000000000 (1 billion) shows up in each. If set to 'none': 1,000,000,000. If set to 'e': 1e+9. If set to 'E': 1E+9. If set to 'power': 1x10^9 (where the 9 will appear super-scripted). If set to 'SI': 1G. If set to 'B': 1B (useful when referring to currency)."
            }, 
            "showexponent": {
                "key_type": "style", 
                "val_types": "'all' | 'first' | 'last' | 'none'", 
                "required": false, 
                "description": "If set to 'all', ALL exponents will be shown appended to their significands. If set to 'first', the first tick's exponent will be appended to its significand, however no other exponents will appear--only the significands. If set to 'last', the last tick's exponent will be appended to its significand, however no other exponents will appear--only the significands. If set to 'none', no exponents will appear, only the significands."
            }, 
            "mirror": {
                "key_type": "style", 
                "val_types": "True | False | 'ticks' | 'all' | 'allticks'", 
                "required": false, 
                "description": "Toggle the axis line and/or ticks across the plots or subplots. If True, mirror the axis line across the primary subplot (i.e. the axis that this axis is anchored to). If 'ticks', mirror the axis line and the ticks. If 'all', mirror the axis line to all subplots containing this axis. If 'allticks', mirror the line and ticks to all subplots containing this axis. If False, don't mirror the axis or the ticks."
            }, 
            "gridcolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ], 
                "description": "Sets the axis grid color."
            }, 
            "gridwidth": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the grid width (in pixels)."
            }, 
            "zerolinecolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ], 
                "description": "Sets the color of this axis' zeroline."
            }, 
            "zerolinewidth": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the width of this axis' zeroline (in pixels)."
            }, 
            "linecolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ], 
                "description": "Sets the axis line color."
            }, 
            "linewidth": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the width of the axis line (in pixels)."
            }, 
            "anchor": {
                "key_type": "plot_info", 
                "val_types": "'y' | 'y1' | 'y2' | ... | 'free' ", 
                "required": false, 
                "description": "Choose whether the position of this x-axis will be anchored to a corresponding y-axis or will be 'free' to appear anywhere in the vertical space of this figure. Has no effect in 3D plots."
            }, 
            "overlaying": {
                "key_type": "plot_info", 
                "val_types": "'x' | 'x1' | 'x2' | ... | False", 
                "required": false, 
                "description": "Choose to overlay the data bound to this x-axis on the same plotting area as a corresponding y-axis or choose not overlay other x-the other axis/axes of this figure.Has no effect in 3D plots."
            }, 
            "side": {
                "key_type": "plot_info", 
                "val_types": "'bottom' | 'top'", 
                "required": false, 
                "description": "Sets whether this x-axis sits at the 'bottom' of the plot or at the 'top' of the plot.Has no effect in 3D plots."
            }, 
            "position": {
                "key_type": "style", 
                "val_types": "number: x in [0, 1]", 
                "required": false, 
                "description": "Sets where this x-axis is positioned in the plotting space. For example if 'position' is set to 0.5, then this axis is placed at the exact center of the plotting space. Has an effect only if 'anchor' is set to 'free'.Has no effect in 3D plots."
            }, 
            "showbackground": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not this x-axis will have a background color. Has an effect only in 3D plots."
            }, 
            "backgroundcolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "description": "Sets the background color of this x-axis. Has an effect only in 3D plots and if 'showbackground' is set to True."
            }, 
            "showspikes": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not spikes will link up to this x-axis when hovering over data points. Has an effect only in 3D plots."
            }, 
            "spikesides": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the spikes will expand out to the x-axis bounds when hovering over data points. Has an effect only in 3D plots and if 'showspikes' is set to True."
            }, 
            "spikethickness": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the thickness (in pixels) of the x-axis spikes.Has an effect only in 3D plots and if 'showspikes' is set to True."
            }
        }
    }, 
    "yaxis": {
        "name": "YAxis", 
        "obj_type": "dictionary", 
        "parent_keys": [
            "yaxis"
        ], 
        "docstring": "A dictionary-like object for representing a y-axis in plotly.", 
        "examples": [], 
        "links": [
            "https://plot.ly/python/axes/", 
            "https://plot.ly/python/multiple-axes/", 
            "https://plot.ly/python/subplots/", 
            "https://plot.ly/python/insets/"
        ], 
        "keymeta": {
            "title": {
                "key_type": "plot_info", 
                "val_types": "a string", 
                "required": false, 
                "description": "The y-axis title."
            }, 
            "titlefont": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing the font settings of the y-axis title."
            }, 
            "range": {
                "key_type": "style", 
                "val_types": "number array of length 2", 
                "required": false, 
                "description": "Defines the start and end point of this y-axis.", 
                "examples": [
                    "[-13, 20]", 
                    "[0, 1]"
                ]
            }, 
            "domain": {
                "key_type": "plot_info", 
                "val_types": "number array of length 2", 
                "required": false, 
                "description": "Sets the domain of this y-axis; that is, the available space for this y-axis to live in. Domain coordinates are given in normalized coordinates with respect to the paper.", 
                "examples": [
                    "[0, 0.4]", 
                    "[0.6, 1]"
                ]
            }, 
            "type": {
                "key_type": "plot_info", 
                "val_types": "'linear' | 'log' | 'date' | 'category'", 
                "required": false, 
                "description": "Sets the format of this axis."
            }, 
            "rangemode": {
                "key_type": "style", 
                "val_types": "'normal' | 'tozero' | 'nonnegative'", 
                "required": false, 
                "description": "Choose between Plotly's automated axis generation modes: 'normal' (the default) sets the axis range in relation to the extrema in the data object, 'tozero' extends the axes to y=0 no matter the data plotted and 'nonnegative' sets a non-negative range no matter the data plotted."
            }, 
            "autorange": {
                "key_type": "style", 
                "val_types": "True | False | 'reversed'", 
                "required": false, 
                "description": "Toggle whether or not the range of this y-axis is automatically picked by Plotly. If 'range' is set, then 'autorange' is set to False automatically. Otherwise, if 'autorange' is set to True (the default behavior), the range of this y-axis can respond to adjustments made in the web GUI automatically. If 'autorange' is set to 'reversed', then this y-axis is drawn in reverse, e.g. in a 2D plot, from top to bottom instead of from bottom to top (the default behavior)."
            }, 
            "showgrid": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not this axis features grid lines."
            }, 
            "zeroline": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not an additional grid line (thicker than the other grid lines, by default) will appear on this axis along y=0."
            }, 
            "showline": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the line bounding this y-axis will be shown on the figure."
            }, 
            "autotick": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the axis ticks parameters are picked automatically by Plotly. Once 'autotick' is set to False, the axis ticks parameters can be declared with 'ticks', 'tick0', 'dtick0' and other tick-related key in this axis object."
            }, 
            "nticks": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the number of axis ticks. No need to set 'autoticks' to False for 'nticks' to apply."
            }, 
            "ticks": {
                "key_type": "style", 
                "val_types": "'' | 'inside' | 'outside'", 
                "required": false, 
                "description": "Sets the format of the ticks on this axis. For hidden ticks, link 'ticks' to an empty string."
            }, 
            "showticklabels": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the axis ticks will feature tick labels."
            }, 
            "tick0": {
                "key_type": "style", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the starting point of the ticks of this axis."
            }, 
            "dtick": {
                "key_type": "style", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the distance between ticks on this axis."
            }, 
            "ticklen": {
                "key_type": "style", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the length of the tick lines on this axis."
            }, 
            "tickwidth": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the width of the tick lines on this axis."
            }, 
            "tickcolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ], 
                "description": "Sets the color of the tick lines on this axis."
            }, 
            "tickangle": {
                "key_type": "style", 
                "val_types": "number: x in [-90, 90]", 
                "required": false, 
                "description": "Sets the angle in degrees of the ticks on this axis."
            }, 
            "tickfont": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object defining the parameters of the ticks' font."
            }, 
            "exponentformat": {
                "key_type": "style", 
                "val_types": "'none' | 'e' | 'E' | 'power' | 'SI' | 'B'", 
                "required": false, 
                "description": "Sets how exponents show up. Here's how the number 1000000000 (1 billion) shows up in each. If set to 'none': 1,000,000,000. If set to 'e': 1e+9. If set to 'E': 1E+9. If set to 'power': 1x10^9 (where the 9 will appear super-scripted). If set to 'SI': 1G. If set to 'B': 1B (useful when referring to currency)."
            }, 
            "showexponent": {
                "key_type": "style", 
                "val_types": "'all' | 'first' | 'last' | 'none'", 
                "required": false, 
                "description": "If set to 'all', ALL exponents will be shown appended to their significands. If set to 'first', the first tick's exponent will be appended to its significand, however no other exponents will appear--only the significands. If set to 'last', the last tick's exponent will be appended to its significand, however no other exponents will appear--only the significands. If set to 'none', no exponents will appear, only the significands."
            }, 
            "mirror": {
                "key_type": "style", 
                "val_types": "True | False | 'ticks' | 'all' | 'allticks'", 
                "required": false, 
                "description": "Toggle the axis line and/or ticks across the plots or subplots. If True, mirror the axis line across the primary subplot (i.e. the axis that this axis is anchored to). If 'ticks', mirror the axis line and the ticks. If 'all', mirror the axis line to all subplots containing this axis. If 'allticks', mirror the line and ticks to all subplots containing this axis. If False, don't mirror the axis or the ticks."
            }, 
            "gridcolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ], 
                "description": "Sets the axis grid color."
            }, 
            "gridwidth": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the grid width (in pixels)."
            }, 
            "zerolinecolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ], 
                "description": "Sets the color of this axis' zeroline."
            }, 
            "zerolinewidth": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the width of this axis' zeroline (in pixels)."
            }, 
            "linecolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ], 
                "description": "Sets the axis line color."
            }, 
            "linewidth": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the width of the axis line (in pixels)."
            }, 
            "anchor": {
                "key_type": "plot_info", 
                "val_types": "'x' | 'x1' | 'x2' | ... | 'free' ", 
                "required": false, 
                "description": "Choose whether the position of this y-axis will be anchored to a corresponding x-axis or will be 'free' to appear anywhere in the horizontal space of this figure. Has no effect in 3D plots."
            }, 
            "overlaying": {
                "key_type": "plot_info", 
                "val_types": "'y' | 'y1' | 'y2' | ... | False", 
                "required": false, 
                "description": "Choose to overlay the data bound to this y-axis on the same plotting area as a corresponding x-axis or choose not overlay other y-the other axis/axes of this figure.Has no effect in 3D plots."
            }, 
            "side": {
                "key_type": "plot_info", 
                "val_types": "'left' | 'right'", 
                "required": false, 
                "description": "Sets whether this y-axis sits at the 'left' of the plot or at the 'right' of the plot.Has no effect in 3D plots."
            }, 
            "position": {
                "key_type": "style", 
                "val_types": "number: x in [0, 1]", 
                "required": false, 
                "description": "Sets where this y-axis is positioned in the plotting space. For example if 'position' is set to 0.5, then this axis is placed at the exact center of the plotting space. Has an effect only if 'anchor' is set to 'free'.Has no effect in 3D plots."
            }, 
            "showbackground": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not this y-axis will have a background color. Has an effect only in 3D plots."
            }, 
            "backgroundcolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "description": "Sets the background color of this y-axis. Has an effect only in 3D plots and if 'showbackground' is set to True."
            }, 
            "showspikes": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not spikes will link up to this y-axis when hovering over data points. Has an effect only in 3D plots."
            }, 
            "spikesides": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the spikes will expand out to the y-axis bounds when hovering over data points. Has an effect only in 3D plots and if 'showspikes' is set to True."
            }, 
            "spikethickness": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the thickness (in pixels) of the y-axis spikes.Has an effect only in 3D plots and if 'showspikes' is set to True."
            }
        }
    }, 
    "radialaxis": {
        "name": "RadialAxis", 
        "obj_type": "dictionary", 
        "parent_keys": [
            "radialaxis"
        ], 
        "docstring": "A dictionary-like object for representing a radial axis in plotly.", 
        "examples": [], 
        "links": [
            "https://plot.ly/python/polar-chart/"
        ], 
        "keymeta": {
            "range": {
                "key_type": "style", 
                "val_types": "number array of length 2", 
                "required": false, 
                "description": "Defines the start and end point of this radial-axis.", 
                "examples": [
                    "[-13, 20]", 
                    "[0, 1]"
                ]
            }, 
            "domain": {
                "key_type": "plot_info", 
                "val_types": "number array of length 2", 
                "required": false, 
                "description": "Polar chart subplots are not supported yet. This key has currently no effect."
            }, 
            "orientation": {
                "key_type": "style", 
                "val_types": "number: x in [-360, 360]", 
                "required": false, 
                "description": "Sets the orientation (an angle with respect to the origin) of the radial axis."
            }, 
            "showline": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the line bounding this radial-axis will be shown on the figure."
            }, 
            "showticklabels": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the radial axis ticks will feature tick labels."
            }, 
            "tickorientation": {
                "key_type": "style", 
                "val_types": "'horizontal' | 'vertical'", 
                "required": false, 
                "description": "Choose the orientation (from the paper perspective) of the radial axis tick labels."
            }, 
            "ticklen": {
                "key_type": "style", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Sets the length of the tick lines on this radial axis."
            }, 
            "tickcolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ], 
                "description": "Sets the color of the tick lines on this radial axis."
            }, 
            "ticksuffix": {
                "key_type": "style", 
                "val_types": "a string", 
                "required": false, 
                "description": "Sets the length of the tick lines on this radial axis."
            }, 
            "endpadding": {
                "key_type": "style", 
                "val_types": "number", 
                "required": false, 
                "description": "more info coming soon"
            }, 
            "visible": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggles whether or not this object will be visible on the rendered figure."
            }
        }
    }, 
    "angularaxis": {
        "name": "AngularAxis", 
        "obj_type": "dictionary", 
        "parent_keys": [
            "angularaxis"
        ], 
        "docstring": "A dictionary-like object for representing an angular axis in plotly.", 
        "examples": [], 
        "links": [
            "https://plot.ly/python/polar-chart/"
        ], 
        "keymeta": {
            "range": {
                "key_type": "style", 
                "val_types": "number array of length 2", 
                "required": false, 
                "description": "Defines the start and end point of this angular-axis. By default, 'range' is set to [0,360]. Has no effect if 't' is linked to a list or 1d numpy array of strings.", 
                "examples": [
                    "[0, 180]", 
                    "[0, 6.2831]"
                ]
            }, 
            "domain": {
                "key_type": "plot_info", 
                "val_types": "number array of length 2", 
                "required": false, 
                "description": "Polar chart subplots are not supported yet. This key has currently no effect."
            }, 
            "showline": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the line bounding this angular-axis will be shown on the figure. If 'showline' is set to True, the bounding line starts from the origin and extends to the edge of radial axis."
            }, 
            "showticklabels": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the angular axis ticks will feature tick labels."
            }, 
            "tickorientation": {
                "key_type": "style", 
                "val_types": "'horizontal' | 'vertical'", 
                "required": false, 
                "description": "Choose the orientation (from the paper's perspective) of the radial axis tick labels."
            }, 
            "tickcolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ], 
                "description": "Sets the color of the tick lines on this angular axis."
            }, 
            "ticksuffix": {
                "key_type": "style", 
                "val_types": "a string", 
                "required": false, 
                "description": "Sets the length of the tick lines on this angular axis."
            }, 
            "endpadding": {
                "key_type": "style", 
                "val_types": "number", 
                "required": false, 
                "description": "more info coming soon"
            }, 
            "visible": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggles whether or not this object will be visible on the rendered figure."
            }
        }
    }, 
    "scene": {
        "name": "Scene", 
        "obj_type": "dictionary", 
        "parent_keys": [
            "scene"
        ], 
        "docstring": "A dictionary-like object for representing a 3D scene in plotly.", 
        "examples": [], 
        "links": [], 
        "keymeta": {
            "xaxis": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing an x-axis of a particular 3D scene."
            }, 
            "yaxis": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing an y-axis of a particular 3D scene."
            }, 
            "zaxis": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing an z-axis of a particular 3D scene."
            }, 
            "cameraposition": {
                "key_type": "plot_info", 
                "val_types": "camera position list or 1d numpy array", 
                "required": false, 
                "examples": [
                    "[[0.2, 0.5, 0.1, 0.2], [0.1, 0, -0.1], 3]"
                ], 
                "description": "Sets the camera position with respect to the scene. The first entry (a list or 1d numpy array of length 4) sets the angular position of the camera. The second entry (a list or 1d numpy array of length 3) sets the (x,y,z) translation of the camera. The third entry (a scalar) sets zoom of the camera."
            }, 
            "domain": {
                "key_type": "plot_info", 
                "val_types": "domain dictionary", 
                "required": false, 
                "examples": [
                    "{'x': [0, 0.4], 'y': [0.6, 1]}", 
                    "dict(x=[0, 0.4], y=[0.6, 1])"
                ], 
                "description": "Sets the x-y domain of this scene on the plotting surface."
            }, 
            "bgcolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "description": "Sets the background (bg) color of this scene (i.e. of the plotting surface and the margins).", 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ]
            }
        }
    }, 
    "zaxis": {
        "name": "ZAxis", 
        "obj_type": "dictionary", 
        "parent_keys": [
            "zaxis"
        ], 
        "docstring": "A dictionary-like object for representing a z-axis in 3D plotly graphs.", 
        "examples": [], 
        "links": [], 
        "keymeta": {
            "title": {
                "key_type": "plot_info", 
                "val_types": "a string", 
                "required": false, 
                "description": "The z-axis title."
            }, 
            "titlefont": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing the font settings of the z-axis title."
            }, 
            "range": {
                "key_type": "style", 
                "val_types": "number array of length 2", 
                "required": false, 
                "description": "Defines the start and end point of this z-axis.", 
                "examples": [
                    "[-13, 20]", 
                    "[0, 1]"
                ]
            }, 
            "domain": {
                "key_type": "plot_info", 
                "val_types": "number array of length 2", 
                "required": false, 
                "description": "Sets the domain of this z-axis; that is, the available space for this z-axis to live in. Domain coordinates are given in normalized coordinates with respect to the paper.", 
                "examples": [
                    "[0, 0.4]", 
                    "[0.6, 1]"
                ]
            }, 
            "type": {
                "key_type": "plot_info", 
                "val_types": "'linear' | 'log' | 'date' | 'category'", 
                "required": false, 
                "description": "Sets the format of this axis."
            }, 
            "rangemode": {
                "key_type": "style", 
                "val_types": "'normal' | 'tozero' | 'nonnegative'", 
                "required": false, 
                "description": "Choose between Plotly's automated axis generation modes: 'normal' (the default) sets the axis range in relation to the extrema in the data object, 'tozero' extends the axes to z=0 no matter the data plotted and 'nonnegative' sets a non-negative range no matter the data plotted."
            }, 
            "autorange": {
                "key_type": "style", 
                "val_types": "True | False | 'reversed'", 
                "required": false, 
                "description": "Toggle whether or not the range of this z-axis is automatically picked by Plotly. If 'range' is set, then 'autorange' is set to False automatically. Otherwise, if 'autorange' is set to True (the default behavior), the range of this z-axis can respond to adjustments made in the web GUI automatically. If 'autorange' is set to 'reversed', then this z-axis is drawn in reverse."
            }, 
            "showgrid": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not this axis features grid lines."
            }, 
            "zeroline": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not an additional grid line (thicker than the other grid lines, by default) will appear on this axis along z=0."
            }, 
            "showline": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the line bounding this z-axis will be shown on the figure."
            }, 
            "autotick": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the axis ticks parameters are picked automatically by Plotly. Once 'autotick' is set to False, the axis ticks parameters can be declared with 'ticks', 'tick0', 'dtick0' and other tick-related key in this axis object."
            }, 
            "nticks": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the number of axis ticks. No need to set 'autoticks' to False for 'nticks' to apply."
            }, 
            "ticks": {
                "key_type": "style", 
                "val_types": "'' | 'inside' | 'outside'", 
                "required": false, 
                "description": "Sets the format of the ticks on this axis. For hidden ticks, link 'ticks' to an empty string."
            }, 
            "showticklabels": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the axis ticks will feature tick labels."
            }, 
            "tick0": {
                "key_type": "style", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the starting point of the ticks of this axis."
            }, 
            "dtick": {
                "key_type": "style", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the distance between ticks on this axis."
            }, 
            "ticklen": {
                "key_type": "style", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the length of the tick lines on this axis."
            }, 
            "tickwidth": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the width of the tick lines on this axis."
            }, 
            "tickcolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ], 
                "description": "Sets the color of the tick lines on this axis."
            }, 
            "tickangle": {
                "key_type": "style", 
                "val_types": "number: x in [-90, 90]", 
                "required": false, 
                "description": "Sets the angle in degrees of the ticks on this axis."
            }, 
            "tickfont": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object defining the parameters of the ticks' font."
            }, 
            "exponentformat": {
                "key_type": "style", 
                "val_types": "'none' | 'e' | 'E' | 'power' | 'SI' | 'B'", 
                "required": false, 
                "description": "Sets how exponents show up. Here's how the number 1000000000 (1 billion) shows up in each. If set to 'none': 1,000,000,000. If set to 'e': 1e+9. If set to 'E': 1E+9. If set to 'power': 1x10^9 (where the 9 will appear super-scripted). If set to 'SI': 1G. If set to 'B': 1B (useful when referring to currency)."
            }, 
            "showexponent": {
                "key_type": "style", 
                "val_types": "'all' | 'first' | 'last' | 'none'", 
                "required": false, 
                "description": "If set to 'all', ALL exponents will be shown appended to their significands. If set to 'first', the first tick's exponent will be appended to its significand, however no other exponents will appear--only the significands. If set to 'last', the last tick's exponent will be appended to its significand, however no other exponents will appear--only the significands. If set to 'none', no exponents will appear, only the significands."
            }, 
            "mirror": {
                "key_type": "style", 
                "val_types": "True | False | 'ticks' | 'all' | 'allticks'", 
                "required": false, 
                "description": "Has no effect in 3D plots."
            }, 
            "gridcolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ], 
                "description": "Sets the axis grid color."
            }, 
            "gridwidth": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the grid width (in pixels)."
            }, 
            "zerolinecolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ], 
                "description": "Sets the color of this axis' zeroline."
            }, 
            "zerolinewidth": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the width of this axis' zeroline (in pixels)."
            }, 
            "linecolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ], 
                "description": "Sets the axis line color."
            }, 
            "linewidth": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the width of the axis line (in pixels)."
            }, 
            "anchor": {
                "key_type": "plot_info", 
                "val_types": "", 
                "required": false, 
                "description": "Has no effect in 3D plots."
            }, 
            "overlaying": {
                "key_type": "plot_info", 
                "val_types": "", 
                "required": false, 
                "description": "Has no effect in 3D plots."
            }, 
            "side": {
                "key_type": "plot_info", 
                "val_types": "", 
                "required": false, 
                "description": "Has no effect in 3D plots."
            }, 
            "position": {
                "key_type": "style", 
                "val_types": "", 
                "required": false, 
                "description": "Has no effect in 3D plots."
            }, 
            "showbackground": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not this z-axis will have a background color. Has an effect only in 3D plots."
            }, 
            "backgroundcolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "description": "Sets the background color of this z-axis. Has an effect only in 3D plots and if 'showbackground' is set to True."
            }, 
            "showspikes": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not spikes will link up to this z-axis when hovering over data points. Has an effect only in 3D plots."
            }, 
            "spikesides": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the spikes will expand out to the z-axis bounds when hovering over data points. Has an effect only in 3D plots and if 'showspikes' is set to True."
            }, 
            "spikethickness": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the thickness (in pixels) of the z-axis spikes.Has an effect only in 3D plots and if 'showspikes' is set to True."
            }
        }
    }, 
    "layout": {
        "name": "Layout", 
        "obj_type": "dictionary", 
        "parent_keys": [
            "layout"
        ], 
        "docstring": "A dictionary-like object containing specification of the layout of a plotly figure.", 
        "examples": [], 
        "links": [
            "https://plot.ly/python/figure-labels/", 
            "https://plot.ly/python/axes/", 
            "https://plot.ly/python/bar-charts/", 
            "https://plot.ly/python/log-plot/"
        ], 
        "keymeta": {
            "title": {
                "key_type": "plot_info", 
                "val_types": "a string", 
                "required": false, 
                "description": "The title of the figure."
            }, 
            "titlefont": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing the font settings of the figure's title."
            }, 
            "font": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing the global font settings for this figure (e.g. all axis titles and labels)."
            }, 
            "showlegend": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the legend will be shown in this figure."
            }, 
            "autosize": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the dimensions of the figure are automatically picked by Plotly. Plotly picks figure's dimensions as a function of your machine's display resolution. Once 'autosize' is set to False, the figure's dimensions can be set with 'width' and 'height'."
            }, 
            "width": {
                "key_type": "plot_info", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the width in pixels of the figure you are generating."
            }, 
            "height": {
                "key_type": "plot_info", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the height in pixels of the figure you are generating."
            }, 
            "xaxis": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing an x-axis (i.e. an horizontal axis). The first XAxis object can be entered into 'layout' by linking it to 'xaxis' OR 'xaxis1', both keys are identical to Plotly.  To create references other than x-axes, you need to define them in 'layout' using keys 'xaxis2', 'xaxis3' and so on. Note that in 3D plots, XAxis objects must be linked from a Scene object."
            }, 
            "yaxis": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing an y-axis (i.e. an vertical axis). The first YAxis object can be entered into 'layout' by linking it to 'yaxis' OR 'yaxis1', both keys are identical to Plotly.  To create references other than y-axes, you need to define them in 'layout' using keys 'yaxis2', 'yaxis3' and so on. Note that in 3D plots, YAxis objects must be linked from a Scene object."
            }, 
            "legend": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object containing the legend parameters for this figure."
            }, 
            "annotations": {
                "key_type": "object", 
                "val_types": "list-like object of one or several dictionary-like object", 
                "required": false, 
                "description": "Links a list-like object that contains one or multiple annotation dictionary-like objects."
            }, 
            "margin": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object containing the margin parameters for this figure."
            }, 
            "paper_bgcolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ], 
                "description": "Sets the color of the figure's paper (i.e. area representing the canvas of the figure)."
            }, 
            "plot_bgcolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ], 
                "description": "Sets the background color of the plot (i.e. the area laying inside this figure's axes."
            }, 
            "hovermode": {
                "key_type": "style", 
                "val_types": "'closest' | 'x' | 'y'", 
                "required": false, 
                "description": "Sets this figure's behavior when a user hovers over it. When set to 'x', all data sharing the same 'x' coordinate will be shown on screen with corresponding trace labels. When set to 'y' all data sharing the same 'y' coordinates will be shown on the screen with corresponding trace labels. When set to 'closest', information about the data point closest to where the viewer is hovering will appear."
            }, 
            "dragmode": {
                "key_type": "style", 
                "val_types": "'zoom' | 'pan' | 'rotate' (in 3D plots)", 
                "required": false, 
                "description": "Sets this figure's behavior when a user preforms a mouse 'drag' in the plot area. When set to 'zoom', a portion of the plot will be highlighted, when the viewer exits the drag, this highlighted section will be zoomed in on. When set to 'pan', data in the plot will move along with the viewers dragging motions. A user can always depress the 'shift' key to access the whatever functionality has not been set as the default. In 3D plots, the default drag mode is 'rotate' which rotates the scene."
            }, 
            "separators": {
                "key_type": "style", 
                "val_types": "a two-character string", 
                "required": false, 
                "description": "Sets the decimal (the first character) and thousands (the second character) separators to be displayed on this figure's tick labels and hover mode. This is meant for internationalization purposes. For example, if 'separator' is set to ', ', then decimals are separated by commas and thousands by spaces. One may have to set 'exponentformat' to 'none' in the corresponding axis object(s) to see the effects."
            }, 
            "barmode": {
                "key_type": "plot_info", 
                "val_types": "'stack' | 'group' | 'overlay'", 
                "required": false, 
                "description": "For bar and histogram plots only. This sets how multiple bar objects are plotted together. In other words, this defines how bars at the same location appear on the plot. If set to 'stack' the bars are stacked on top of one another. If set to 'group', the bars are plotted next to one another, centered around the shared location. If set to 'overlay', the bars are simply plotted over one another, you may need to set the opacity to see this."
            }, 
            "bargap": {
                "key_type": "style", 
                "val_types": "number: x in [0, 1)", 
                "required": false, 
                "description": "For bar and histogram plots only. Sets the gap between bars (or sets of bars) at different locations."
            }, 
            "bargroupgap": {
                "key_type": "style", 
                "val_types": "number: x in [0, 1)", 
                "required": false, 
                "description": "For bar and histogram plots only. Sets the gap between bars in the same group. That is, when multiple bar objects are plotted and share the same locations, this sets the distance between bars at each location."
            }, 
            "boxmode": {
                "key_type": "plot_info", 
                "val_types": "'overlay' | 'group'", 
                "required": false, 
                "description": "For box plots only. Sets how groups of box plots appear. If set to 'overlay', a group of boxes will be plotted directly on top of one another at their specified location. If set to 'group', the boxes will be centered around their shared location, but they will not overlap."
            }, 
            "boxgap": {
                "key_type": "style", 
                "val_types": "number: x in [0, 1)", 
                "required": false, 
                "description": "For box plots only. Sets the gap between boxes at different locations (i.e. x-labels). If there are multiple boxes at a single x-label, then this sets the gap between these sets of boxes.For example, if 0, then there is no gap between boxes. If 0.25, then this gap occupies 25% of the available space and the box width (or width of the set of boxes) occupies the remaining 75%."
            }, 
            "boxgroupgap": {
                "key_type": "style", 
                "val_types": "number: x in [0, 1)", 
                "required": false, 
                "description": "For box plots only. Sets the gap between boxes in the same group, where a group is the set of boxes with the same location (i.e. x-label). For example, if 0, then there is no gap between boxes. If 0.25, then this gap occupies 25% of the available space and the box width occupies the remaining 75%."
            }, 
            "radialaxis": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing the radial axis in a polar plot."
            }, 
            "angularaxis": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing the angular axis in a polar plot."
            }, 
            "scene": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing a scene in a 3D plot. The first Scene object can be entered into 'layout' by linking it to 'scene' OR 'scene1', both keys are identical to Plotly. Link subsequent Scene objects using 'scene2', 'scene3', etc."
            }, 
            "direction": {
                "key_type": "plot_info", 
                "val_types": "'clockwise' | 'counterclockwise'", 
                "required": false, 
                "description": "For polar plots only. Sets the direction corresponding to positive angles."
            }, 
            "orientation": {
                "key_type": "plot_info", 
                "val_types": "number: x in [-360, 360]", 
                "required": false, 
                "description": "For polar plots only. Rotates the entire polar by the given angle."
            }, 
            "hidesources": {
                "key_type": "style", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not an annotation citing the data source is placed at the bottom-right corner of the figure.This key has an effect only on graphs that have been generated from forked graphs from plot.ly."
            }
        }
    }, 
    "font": {
        "name": "Font", 
        "obj_type": "dictionary", 
        "parent_keys": [
            "font", 
            "titlefont", 
            "textfont", 
            "tickfont"
        ], 
        "docstring": "A dictionary-like object containing specifications of on-plot, title or global text font.", 
        "examples": [], 
        "links": [
            "https://plot.ly/python/font/", 
            "https://plot.ly/python/text-and-annotations/", 
            "https://plot.ly/python/line-and-scatter/"
        ], 
        "keymeta": {
            "family": {
                "key_type": "style", 
                "val_types": "'Arial, sans-serif' |  'Balto, sans-serif' |  'Courier New, monospace' |  'Droid Sans, sans-serif' |  'Droid Serif, serif' |  'Droid Sans Mono, sans-serif' |  'Georgia, serif' |  'Gravitas One, cursive' |  'Old Standard TT, serif' |  'Open Sans, sans-serif' or ('') |  'PT Sans Narrow, sans-serif' |  'Raleway, sans-serif' |  'Times New Roman, Times, serif'", 
                "required": false, 
                "description": "Sets the font family. If linked in the first level of the layout object,  set the color of the global font. The default font in Plotly is 'Open Sans, sans-serif'."
            }, 
            "size": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the size of text font. If linked directly from 'layout', set the size of the global font.", 
                "streamable": true
            }, 
            "color": {
                "val_types": "a string describing color", 
                "description": "Sets the color of the text font. If linked directly from 'layout', set the color of the global font.", 
                "required": false, 
                "streamable": true, 
                "key_type": "style", 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ]
            }, 
            "outlinecolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "description": "For polar chart only. Sets the color of the text's outline.", 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ]
            }
        }
    }, 
    "legend": {
        "name": "Legend", 
        "obj_type": "dictionary", 
        "parent_keys": [
            "legend"
        ], 
        "docstring": "A dictionary-like object for representing a legend in plotly.", 
        "examples": [], 
        "links": [
            "https://plot.ly/python/legend/", 
            "https://plot.ly/python/figure-labels/"
        ], 
        "keymeta": {
            "x": {
                "key_type": "style", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the 'x' position of this legend. Use in conjunction with 'xref' and 'xanchor' to fine-tune the location of this legend."
            }, 
            "y": {
                "key_type": "style", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the 'y' position of this legend. Use in conjunction with 'yref' and 'yanchor' to fine-tune the location of this legend."
            }, 
            "traceorder": {
                "key_type": "style", 
                "val_types": "'normal' | 'reversed'", 
                "required": false, 
                "description": "Trace order is set by the order of trace in the data dictionary. The 'traceorder' key sets whether the legend labels are shown from first-to-last trace ('normal') or from last-to-first ('reversed')."
            }, 
            "font": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing the font settings within the legend."
            }, 
            "bgcolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "description": "Sets the background (bg) color of the legend.", 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ]
            }, 
            "bordercolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "description": "Sets the enclosing border color for the legend.", 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ]
            }, 
            "borderwidth": {
                "key_type": "style", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Sets the width of the border enclosing for the legend."
            }, 
            "xref": {
                "key_type": "style", 
                "val_types": "'paper' | 'x1' | 'x2' | etc", 
                "required": false, 
                "description": "Sets the x coordinate system which this object refers to. If you reference an axis, e.g., 'x2', the object will move with pan-and-zoom to stay fixed to this point. If you reference the 'paper', it remains fixed regardless of pan-and-zoom. In other words, if set to 'paper', the 'x' location refers to the distance from the left side of the plotting area in normalized coordinates where 0 is 'left' and 1 is 'right'. If set to refer to an xaxis' , e.g., 'x1', 'x2', 'x3', etc., the 'x' location will refer to the location in terms of this axis."
            }, 
            "yref": {
                "key_type": "style", 
                "val_types": "'paper' | 'y1' | 'y2' | etc", 
                "required": false, 
                "description": "Sets the y coordinate system which this object refers to. If you reference an axis, e.g., 'y2', the object will move with pan-and-zoom to stay fixed to this point. If you reference the 'paper', it remains fixed regardless of pan-and-zoom. In other words, if set to 'paper', the 'y' location refers to the distance from the left side of the plotting area in normalized coordinates where 0 is 'bottom' and 1 is 'top'. If set to refer to an yaxis' , e.g., 'y1', 'y2', 'y3', etc., the 'y' location will refer to the location in terms of this axis."
            }, 
            "xanchor": {
                "key_type": "plot_info", 
                "val_types": "'auto' | 'left' | 'center' | 'right'", 
                "required": false, 
                "description": "Sets the horizontal position anchor of this legend. That is, bind the position set with the 'x' key to the 'left' or 'center' or 'right' of this legend. For example, if 'x' is set to 1, 'xref' to 'paper', and 'xanchor' to 'right', the right-most portion of this object will line up with the right-most edge of the plotting area."
            }, 
            "yanchor": {
                "key_type": "plot_info", 
                "val_types": "'auto' | 'bottom' | 'middle' | 'top'", 
                "required": false, 
                "description": "Sets the vertical position anchor of this legend. That is, bind the position set with the 'y' key to the 'bottom' or 'middle' or 'top' of this legend. For example, if 'y' is set to 1, 'yref' to 'paper', and 'yanchor' to 'top', the top-most portion of this object will line up with the top-most edge of the plotting area."
            }
        }
    }, 
    "annotation": {
        "name": "Annotation", 
        "obj_type": "dictionary", 
        "parent_keys": [], 
        "docstring": "A dictionary-like object for representing an annotation in plotly. Annotations appear as notes on the final figure. You can set all the features of the annotation text, background color, and location. Additionally, these notes can be anchored to actual data or the page for help with location after pan-and-zoom actions.", 
        "examples": [
            "annotation = Annotation(\n     text='what i want this to say is:<br>THIS!',\n     x=0,\n     y=0,\n     xref='paper',\n     yref='paper,\n     yanchor='bottom',\n     xanchor='left')"
        ], 
        "links": [
            "https://plot.ly/python/text-and-annotations/"
        ], 
        "keymeta": {
            "x": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the 'x' position of this annotation. Use in conjunction with 'xref' and 'xanchor' to fine-tune the location of this annotation."
            }, 
            "y": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "Sets the 'y' position of this annotation. Use in conjunction with 'yref' and 'yanchor' to fine-tune the location of this annotation."
            }, 
            "xref": {
                "key_type": "plot_info", 
                "val_types": "'paper' | 'x1' | 'x2' | etc", 
                "required": false, 
                "description": "Sets the x coordinate system which this object refers to. If you reference an axis, e.g., 'x2', the object will move with pan-and-zoom to stay fixed to this point. If you reference the 'paper', it remains fixed regardless of pan-and-zoom. In other words, if set to 'paper', the 'x' location refers to the distance from the left side of the plotting area in normalized coordinates where 0 is 'left' and 1 is 'right'. If set to refer to an xaxis' , e.g., 'x1', 'x2', 'x3', etc., the 'x' location will refer to the location in terms of this axis."
            }, 
            "yref": {
                "key_type": "plot_info", 
                "val_types": "'paper' | 'y1' | 'y2' | etc", 
                "required": false, 
                "description": "Sets the y coordinate system which this object refers to. If you reference an axis, e.g., 'y2', the object will move with pan-and-zoom to stay fixed to this point. If you reference the 'paper', it remains fixed regardless of pan-and-zoom. In other words, if set to 'paper', the 'y' location refers to the distance from the left side of the plotting area in normalized coordinates where 0 is 'bottom' and 1 is 'top'. If set to refer to an yaxis' , e.g., 'y1', 'y2', 'y3', etc., the 'y' location will refer to the location in terms of this axis."
            }, 
            "text": {
                "key_type": "plot_info", 
                "val_types": "a string", 
                "required": false, 
                "examples": [
                    "'regular text'", 
                    "'an annotation<br>spanning two lines'", 
                    "'<b>bold text</b>'", 
                    "\"<a href='https://plot.ly/'>a link to plot.ly</a>\""
                ], 
                "description": "The text associated with this annotation. Plotly uses a subset of HTML tags to do things like newline (<br>), bold (<b></b>), italics (<i></i>), hyperlinks (<a href='...'></a>). Tags <em>, <sup>, <sub>, <span> are also supported."
            }, 
            "showarrow": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "Toggle whether or not the arrow associated with this annotation with be shown. If False, then the text linked to 'text' lines up with the 'x', 'y' coordinates'. If True (the default), then 'text' is placed near the arrow's tail."
            }, 
            "font": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "Links a dictionary-like object describing the font settings within this annotation."
            }, 
            "xanchor": {
                "key_type": "plot_info", 
                "val_types": "'auto' | 'left' | 'center' | 'right'", 
                "required": false, 
                "description": "Sets the horizontal position anchor of this annotation. That is, bind the position set with the 'x' key to the 'left' or 'center' or 'right' of this annotation. For example, if 'x' is set to 1, 'xref' to 'paper', and 'xanchor' to 'right', the right-most portion of this object will line up with the right-most edge of the plotting area."
            }, 
            "yanchor": {
                "key_type": "plot_info", 
                "val_types": "'auto' | 'bottom' | 'middle' | 'top'", 
                "required": false, 
                "description": "Sets the vertical position anchor of this annotation. That is, bind the position set with the 'y' key to the 'bottom' or 'middle' or 'top' of this annotation. For example, if 'y' is set to 1, 'yref' to 'paper', and 'yanchor' to 'top', the top-most portion of this object will line up with the top-most edge of the plotting area."
            }, 
            "align": {
                "key_type": "plot_info", 
                "val_types": "'left' | 'center' | 'right'", 
                "required": false, 
                "description": "Sets the vertical alignment of the text in the annotation with respect to the set 'x', 'y' position. Has only an effect if the text linked to 'text' spans more two or more lines (using <br> HTML one or more tags)."
            }, 
            "arrowhead": {
                "key_type": "style", 
                "val_types": "0 | 1 | 2 | 3 | 4 | 5 | 6 | 7", 
                "required": false, 
                "description": "Sets the arrowhead style. Has an effect only if 'showarrow' is set to True."
            }, 
            "arrowsize": {
                "key_type": "style", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Scales the arrowhead's size. Has an effect only if 'showarrow' is set to True."
            }, 
            "arrowwidth": {
                "key_type": "style", 
                "val_types": "number: x > 0", 
                "required": false, 
                "description": "Sets the arrowhead's width (in pixels). Has an effect only if 'showarrow' is set to True."
            }, 
            "arrowcolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ], 
                "description": "Sets the color of the arrowhead. Has an effect only if 'showarrow' is set to True."
            }, 
            "ax": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "Position of the annotation text relative to the arrowhead about the x-axis. Has an effect only if 'showarrow' is set to True."
            }, 
            "ay": {
                "key_type": "plot_info", 
                "val_types": "number", 
                "required": false, 
                "description": "Position of the annotation text relative to the arrowhead about the y-axis. Has an effect only if 'showarrow' is set to True."
            }, 
            "textangle": {
                "key_type": "style", 
                "val_types": "number: x in [-180, 180]", 
                "required": false, 
                "description": "Sets the angle of the text linked to 'text' with respect to the horizontal."
            }, 
            "bordercolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "description": "The color of the enclosing boarder of this annotation.", 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ]
            }, 
            "borderwidth": {
                "key_type": "style", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Sets the width of the boarder enclosing this annotation"
            }, 
            "borderpad": {
                "key_type": "style", 
                "val_types": "number: x in [0, 10]", 
                "required": false, 
                "description": "The amount of space (padding) between the text and the enclosing boarder."
            }, 
            "bgcolor": {
                "key_type": "style", 
                "val_types": "a string describing color", 
                "required": false, 
                "description": "Sets the background (bg) color of this annotation.", 
                "examples": [
                    "'green'", 
                    "'rgb(0, 255, 0)'", 
                    "'rgba(0, 255, 0, 0.3)'", 
                    "'hsl(120,100%,50%)'", 
                    "'hsla(120,100%,50%,0.3)'", 
                    "'#434F1D'"
                ]
            }, 
            "opacity": {
                "key_type": "style", 
                "val_types": "number: x in [0, 1]", 
                "required": false, 
                "description": "Sets the opacity, or transparency, of the entire object, also known as the alpha channel of colors. If the object's color is given in terms of 'rgba' color model, 'opacity' is redundant."
            }
        }
    }, 
    "margin": {
        "name": "Margin", 
        "obj_type": "dictionary", 
        "parent_keys": [
            "margin"
        ], 
        "docstring": "A dictionary-like object containing specification of the margins.", 
        "examples": [], 
        "links": [
            "https://plot.ly/python/setting-graph-size/"
        ], 
        "keymeta": {
            "l": {
                "key_type": "plot_info", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Sets the left margin size in pixels."
            }, 
            "r": {
                "key_type": "plot_info", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Sets the right margin size in pixels."
            }, 
            "b": {
                "key_type": "plot_info", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Sets the bottom margin size in pixels."
            }, 
            "t": {
                "key_type": "plot_info", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Sets the top margin size in pixels."
            }, 
            "pad": {
                "key_type": "plot_info", 
                "val_types": "number: x >= 0", 
                "required": false, 
                "description": "Sets the distance between edge of the plot and the bounding rectangle that encloses the plot (in pixels)."
            }, 
            "autoexpand": {
                "key_type": "plot_info", 
                "val_types": "a boolean: True | False", 
                "required": false, 
                "description": "more info coming soon"
            }
        }
    }, 
    "figure": {
        "name": "Figure", 
        "obj_type": "dictionary", 
        "parent_keys": [], 
        "docstring": "A dictionary-like object representing a figure to be rendered by plotly. This is the container for all things to be rendered in a figure.", 
        "examples": [], 
        "links": [], 
        "keymeta": {
            "data": {
                "key_type": "object", 
                "val_types": "list-like object of one or several dictionary-like object", 
                "required": false, 
                "description": "A list-like object of one or multiple trace dictionary-like objects to be shown on one plotly figure."
            }, 
            "layout": {
                "key_type": "object", 
                "val_types": "dictionary-like object", 
                "required": false, 
                "description": "A dictionary-like object that contains the layout parameters (e.g. information about the axis, global settings and layout information related to the rendering of the figure)."
            }
        }
    }, 
    "data": {
        "name": "Data", 
        "obj_type": "list or 1d numpy array", 
        "parent_keys": [
            "data"
        ], 
        "docstring": "A list-like object of trace dictionary-like objects to be shown on one plotly figure.", 
        "examples": [
            "Data([Bar(x=[1,2], y=[4,5]), Scatter(x=[1,2], y[2,3])])"
        ], 
        "links": [], 
        "keymeta": {}
    }, 
    "annotations": {
        "name": "Annotations", 
        "obj_type": "list or 1d numpy array", 
        "parent_keys": [
            "annotations"
        ], 
        "docstring": "A list-like object of annotation dictionary-like objects to be shown on one plotly figure.", 
        "examples": [
            "Annotations([Annotation(x=0, y=1, text='look!'),\n    Annotation(x=1, y=2, text='See the data at the URL below, showarrow=False),\n    Annotation(x=10, y=20, text='this point is an outlier)])"
        ], 
        "links": [], 
        "keymeta": {}
    }
}